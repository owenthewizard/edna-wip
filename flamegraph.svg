<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="318764264"><g><title>[[stack]] (4,040,260 samples, 1.27%)</title><rect x="0.0000%" y="453" width="1.2675%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4040260"/><text x="0.2500%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,040,260 samples, 1.27%)</title><rect x="0.0000%" y="437" width="1.2675%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4040260"/><text x="0.2500%" y="447.50"></text></g><g><title>[anon] (4,047,707 samples, 1.27%)</title><rect x="1.2675%" y="453" width="1.2698%" height="15" fill="rgb(221,193,54)" fg:x="4040260" fg:w="4047707"/><text x="1.5175%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,047,707 samples, 1.27%)</title><rect x="1.2675%" y="437" width="1.2698%" height="15" fill="rgb(248,212,6)" fg:x="4040260" fg:w="4047707"/><text x="1.5175%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4,047,707 samples, 1.27%)</title><rect x="1.2675%" y="421" width="1.2698%" height="15" fill="rgb(208,68,35)" fg:x="4040260" fg:w="4047707"/><text x="1.5175%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4,047,707 samples, 1.27%)</title><rect x="1.2675%" y="405" width="1.2698%" height="15" fill="rgb(232,128,0)" fg:x="4040260" fg:w="4047707"/><text x="1.5175%" y="415.50"></text></g><g><title>alloc::alloc::realloc (4,047,707 samples, 1.27%)</title><rect x="1.2675%" y="389" width="1.2698%" height="15" fill="rgb(207,160,47)" fg:x="4040260" fg:w="4047707"/><text x="1.5175%" y="399.50"></text></g><g><title>__rust_realloc (4,047,707 samples, 1.27%)</title><rect x="1.2675%" y="373" width="1.2698%" height="15" fill="rgb(228,23,34)" fg:x="4040260" fg:w="4047707"/><text x="1.5175%" y="383.50"></text></g><g><title>core::alloc::global::GlobalAlloc::realloc (4,047,707 samples, 1.27%)</title><rect x="1.2675%" y="357" width="1.2698%" height="15" fill="rgb(218,30,26)" fg:x="4040260" fg:w="4047707"/><text x="1.5175%" y="367.50"></text></g><g><title>&lt;rpmalloc::RpMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (4,047,707 samples, 1.27%)</title><rect x="1.2675%" y="341" width="1.2698%" height="15" fill="rgb(220,122,19)" fg:x="4040260" fg:w="4047707"/><text x="1.5175%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,081,139 samples, 0.97%)</title><rect x="2.5373%" y="453" width="0.9666%" height="15" fill="rgb(250,228,42)" fg:x="8087967" fg:w="3081139"/><text x="2.7873%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,979,854 samples, 0.93%)</title><rect x="2.5691%" y="437" width="0.9348%" height="15" fill="rgb(240,193,28)" fg:x="8189252" fg:w="2979854"/><text x="2.8191%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,979,854 samples, 0.93%)</title><rect x="2.5691%" y="421" width="0.9348%" height="15" fill="rgb(216,20,37)" fg:x="8189252" fg:w="2979854"/><text x="2.8191%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,979,854 samples, 0.93%)</title><rect x="2.5691%" y="405" width="0.9348%" height="15" fill="rgb(206,188,39)" fg:x="8189252" fg:w="2979854"/><text x="2.8191%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,979,854 samples, 0.93%)</title><rect x="2.5691%" y="389" width="0.9348%" height="15" fill="rgb(217,207,13)" fg:x="8189252" fg:w="2979854"/><text x="2.8191%" y="399.50"></text></g><g><title>_dl_catch_exception (2,979,854 samples, 0.93%)</title><rect x="2.5691%" y="373" width="0.9348%" height="15" fill="rgb(231,73,38)" fg:x="8189252" fg:w="2979854"/><text x="2.8191%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,979,854 samples, 0.93%)</title><rect x="2.5691%" y="357" width="0.9348%" height="15" fill="rgb(225,20,46)" fg:x="8189252" fg:w="2979854"/><text x="2.8191%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,979,854 samples, 0.93%)</title><rect x="2.5691%" y="341" width="0.9348%" height="15" fill="rgb(210,31,41)" fg:x="8189252" fg:w="2979854"/><text x="2.8191%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,979,854 samples, 0.93%)</title><rect x="2.5691%" y="325" width="0.9348%" height="15" fill="rgb(221,200,47)" fg:x="8189252" fg:w="2979854"/><text x="2.8191%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,979,854 samples, 0.93%)</title><rect x="2.5691%" y="309" width="0.9348%" height="15" fill="rgb(226,26,5)" fg:x="8189252" fg:w="2979854"/><text x="2.8191%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,979,854 samples, 0.93%)</title><rect x="2.5691%" y="293" width="0.9348%" height="15" fill="rgb(249,33,26)" fg:x="8189252" fg:w="2979854"/><text x="2.8191%" y="303.50"></text></g><g><title>[unknown] (4,035,702 samples, 1.27%)</title><rect x="3.5039%" y="453" width="1.2660%" height="15" fill="rgb(235,183,28)" fg:x="11169106" fg:w="4035702"/><text x="3.7539%" y="463.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,035,702 samples, 1.27%)</title><rect x="3.5039%" y="437" width="1.2660%" height="15" fill="rgb(221,5,38)" fg:x="11169106" fg:w="4035702"/><text x="3.7539%" y="447.50"></text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (7,215,457 samples, 2.26%)</title><rect x="4.7699%" y="389" width="2.2636%" height="15" fill="rgb(247,18,42)" fg:x="15204808" fg:w="7215457"/><text x="5.0199%" y="399.50">&lt;..</text></g><g><title>rand::seq::gen_index (7,215,457 samples, 2.26%)</title><rect x="4.7699%" y="373" width="2.2636%" height="15" fill="rgb(241,131,45)" fg:x="15204808" fg:w="7215457"/><text x="5.0199%" y="383.50">r..</text></g><g><title>rand::rng::Rng::gen_range (7,215,457 samples, 2.26%)</title><rect x="4.7699%" y="357" width="2.2636%" height="15" fill="rgb(249,31,29)" fg:x="15204808" fg:w="7215457"/><text x="5.0199%" y="367.50">r..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (7,215,457 samples, 2.26%)</title><rect x="4.7699%" y="341" width="2.2636%" height="15" fill="rgb(225,111,53)" fg:x="15204808" fg:w="7215457"/><text x="5.0199%" y="351.50">&lt;..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (7,215,457 samples, 2.26%)</title><rect x="4.7699%" y="325" width="2.2636%" height="15" fill="rgb(238,160,17)" fg:x="15204808" fg:w="7215457"/><text x="5.0199%" y="335.50">&lt;..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (7,215,457 samples, 2.26%)</title><rect x="4.7699%" y="309" width="2.2636%" height="15" fill="rgb(214,148,48)" fg:x="15204808" fg:w="7215457"/><text x="5.0199%" y="319.50">&lt;..</text></g><g><title>alloc::string::String::push_str (4,056,160 samples, 1.27%)</title><rect x="7.0335%" y="373" width="1.2725%" height="15" fill="rgb(232,36,49)" fg:x="22420265" fg:w="4056160"/><text x="7.2835%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4,056,160 samples, 1.27%)</title><rect x="7.0335%" y="357" width="1.2725%" height="15" fill="rgb(209,103,24)" fg:x="22420265" fg:w="4056160"/><text x="7.2835%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4,056,160 samples, 1.27%)</title><rect x="7.0335%" y="341" width="1.2725%" height="15" fill="rgb(229,88,8)" fg:x="22420265" fg:w="4056160"/><text x="7.2835%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4,056,160 samples, 1.27%)</title><rect x="7.0335%" y="325" width="1.2725%" height="15" fill="rgb(213,181,19)" fg:x="22420265" fg:w="4056160"/><text x="7.2835%" y="335.50"></text></g><g><title>_rpmalloc_deallocate (4,164,052 samples, 1.31%)</title><rect x="8.3060%" y="229" width="1.3063%" height="15" fill="rgb(254,191,54)" fg:x="26476425" fg:w="4164052"/><text x="8.5560%" y="239.50"></text></g><g><title>_rpmalloc_deallocate_small_or_medium (4,164,052 samples, 1.31%)</title><rect x="8.3060%" y="213" width="1.3063%" height="15" fill="rgb(241,83,37)" fg:x="26476425" fg:w="4164052"/><text x="8.5560%" y="223.50"></text></g><g><title>_rpmalloc_deallocate_direct_small_or_medium (4,164,052 samples, 1.31%)</title><rect x="8.3060%" y="197" width="1.3063%" height="15" fill="rgb(233,36,39)" fg:x="26476425" fg:w="4164052"/><text x="8.5560%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8,181,521 samples, 2.57%)</title><rect x="8.3060%" y="373" width="2.5666%" height="15" fill="rgb(226,3,54)" fg:x="26476425" fg:w="8181521"/><text x="8.5560%" y="383.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8,181,521 samples, 2.57%)</title><rect x="8.3060%" y="357" width="2.5666%" height="15" fill="rgb(245,192,40)" fg:x="26476425" fg:w="8181521"/><text x="8.5560%" y="367.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8,181,521 samples, 2.57%)</title><rect x="8.3060%" y="341" width="2.5666%" height="15" fill="rgb(238,167,29)" fg:x="26476425" fg:w="8181521"/><text x="8.5560%" y="351.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,181,521 samples, 2.57%)</title><rect x="8.3060%" y="325" width="2.5666%" height="15" fill="rgb(232,182,51)" fg:x="26476425" fg:w="8181521"/><text x="8.5560%" y="335.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,181,521 samples, 2.57%)</title><rect x="8.3060%" y="309" width="2.5666%" height="15" fill="rgb(231,60,39)" fg:x="26476425" fg:w="8181521"/><text x="8.5560%" y="319.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,181,521 samples, 2.57%)</title><rect x="8.3060%" y="293" width="2.5666%" height="15" fill="rgb(208,69,12)" fg:x="26476425" fg:w="8181521"/><text x="8.5560%" y="303.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (8,181,521 samples, 2.57%)</title><rect x="8.3060%" y="277" width="2.5666%" height="15" fill="rgb(235,93,37)" fg:x="26476425" fg:w="8181521"/><text x="8.5560%" y="287.50">al..</text></g><g><title>__rust_dealloc (8,181,521 samples, 2.57%)</title><rect x="8.3060%" y="261" width="2.5666%" height="15" fill="rgb(213,116,39)" fg:x="26476425" fg:w="8181521"/><text x="8.5560%" y="271.50">__..</text></g><g><title>&lt;rpmalloc::RpMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (8,181,521 samples, 2.57%)</title><rect x="8.3060%" y="245" width="2.5666%" height="15" fill="rgb(222,207,29)" fg:x="26476425" fg:w="8181521"/><text x="8.5560%" y="255.50">&lt;r..</text></g><g><title>rpfree (4,017,469 samples, 1.26%)</title><rect x="9.6123%" y="229" width="1.2603%" height="15" fill="rgb(206,96,30)" fg:x="30640477" fg:w="4017469"/><text x="9.8623%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_ascii (4,127,294 samples, 1.29%)</title><rect x="10.8726%" y="373" width="1.2948%" height="15" fill="rgb(218,138,4)" fg:x="34657946" fg:w="4127294"/><text x="11.1226%" y="383.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (4,127,294 samples, 1.29%)</title><rect x="10.8726%" y="357" width="1.2948%" height="15" fill="rgb(250,191,14)" fg:x="34657946" fg:w="4127294"/><text x="11.1226%" y="367.50"></text></g><g><title>core::slice::ascii::is_ascii (4,127,294 samples, 1.29%)</title><rect x="10.8726%" y="341" width="1.2948%" height="15" fill="rgb(239,60,40)" fg:x="34657946" fg:w="4127294"/><text x="11.1226%" y="351.50"></text></g><g><title>core::slice::ascii::is_ascii::runtime (4,127,294 samples, 1.29%)</title><rect x="10.8726%" y="325" width="1.2948%" height="15" fill="rgb(206,27,48)" fg:x="34657946" fg:w="4127294"/><text x="11.1226%" y="335.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (8,102,260 samples, 2.54%)</title><rect x="12.1674%" y="357" width="2.5418%" height="15" fill="rgb(225,35,8)" fg:x="38785240" fg:w="8102260"/><text x="12.4174%" y="367.50">&lt;c..</text></g><g><title>core::str::validations::next_code_point (8,102,260 samples, 2.54%)</title><rect x="12.1674%" y="341" width="2.5418%" height="15" fill="rgb(250,213,24)" fg:x="38785240" fg:w="8102260"/><text x="12.4174%" y="351.50">co..</text></g><g><title>core::str::validations::utf8_first_byte (4,068,614 samples, 1.28%)</title><rect x="13.4328%" y="325" width="1.2764%" height="15" fill="rgb(247,123,22)" fg:x="42818886" fg:w="4068614"/><text x="13.6828%" y="335.50"></text></g><g><title>alloc::string::String::push (4,035,156 samples, 1.27%)</title><rect x="14.7091%" y="357" width="1.2659%" height="15" fill="rgb(231,138,38)" fg:x="46887500" fg:w="4035156"/><text x="14.9591%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,035,156 samples, 1.27%)</title><rect x="14.7091%" y="341" width="1.2659%" height="15" fill="rgb(231,145,46)" fg:x="46887500" fg:w="4035156"/><text x="14.9591%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4,035,156 samples, 1.27%)</title><rect x="14.7091%" y="325" width="1.2659%" height="15" fill="rgb(251,118,11)" fg:x="46887500" fg:w="4035156"/><text x="14.9591%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (4,035,156 samples, 1.27%)</title><rect x="14.7091%" y="309" width="1.2659%" height="15" fill="rgb(217,147,25)" fg:x="46887500" fg:w="4035156"/><text x="14.9591%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4,035,156 samples, 1.27%)</title><rect x="14.7091%" y="293" width="1.2659%" height="15" fill="rgb(247,81,37)" fg:x="46887500" fg:w="4035156"/><text x="14.9591%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,035,156 samples, 1.27%)</title><rect x="14.7091%" y="277" width="1.2659%" height="15" fill="rgb(209,12,38)" fg:x="46887500" fg:w="4035156"/><text x="14.9591%" y="287.50"></text></g><g><title>_rpmalloc_allocate (4,035,156 samples, 1.27%)</title><rect x="14.7091%" y="261" width="1.2659%" height="15" fill="rgb(227,1,9)" fg:x="46887500" fg:w="4035156"/><text x="14.9591%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4,025,419 samples, 1.26%)</title><rect x="15.9750%" y="325" width="1.2628%" height="15" fill="rgb(248,47,43)" fg:x="50922656" fg:w="4025419"/><text x="16.2250%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4,025,419 samples, 1.26%)</title><rect x="15.9750%" y="309" width="1.2628%" height="15" fill="rgb(221,10,30)" fg:x="50922656" fg:w="4025419"/><text x="16.2250%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4,025,419 samples, 1.26%)</title><rect x="15.9750%" y="293" width="1.2628%" height="15" fill="rgb(210,229,1)" fg:x="50922656" fg:w="4025419"/><text x="16.2250%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4,025,419 samples, 1.26%)</title><rect x="15.9750%" y="277" width="1.2628%" height="15" fill="rgb(222,148,37)" fg:x="50922656" fg:w="4025419"/><text x="16.2250%" y="287.50"></text></g><g><title>alloc::string::String::push (8,390,656 samples, 2.63%)</title><rect x="15.9750%" y="341" width="2.6322%" height="15" fill="rgb(234,67,33)" fg:x="50922656" fg:w="8390656"/><text x="16.2250%" y="351.50">al..</text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (4,365,237 samples, 1.37%)</title><rect x="17.2378%" y="325" width="1.3694%" height="15" fill="rgb(247,98,35)" fg:x="54948075" fg:w="4365237"/><text x="17.4878%" y="335.50"></text></g><g><title>core::char::methods::encode_utf8_raw (4,365,237 samples, 1.37%)</title><rect x="17.2378%" y="309" width="1.3694%" height="15" fill="rgb(247,138,52)" fg:x="54948075" fg:w="4365237"/><text x="17.4878%" y="319.50"></text></g><g><title>core::char::methods::len_utf8 (4,365,237 samples, 1.37%)</title><rect x="17.2378%" y="293" width="1.3694%" height="15" fill="rgb(213,79,30)" fg:x="54948075" fg:w="4365237"/><text x="17.4878%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (4,033,965 samples, 1.27%)</title><rect x="20.3002%" y="309" width="1.2655%" height="15" fill="rgb(246,177,23)" fg:x="64709826" fg:w="4033965"/><text x="20.5502%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (4,033,965 samples, 1.27%)</title><rect x="20.3002%" y="293" width="1.2655%" height="15" fill="rgb(230,62,27)" fg:x="64709826" fg:w="4033965"/><text x="20.5502%" y="303.50"></text></g><g><title>core::slice::index::get_noubcheck (4,033,965 samples, 1.27%)</title><rect x="20.3002%" y="277" width="1.2655%" height="15" fill="rgb(216,154,8)" fg:x="64709826" fg:w="4033965"/><text x="20.5502%" y="287.50"></text></g><g><title>edna::map_internal (21,896,105 samples, 6.87%)</title><rect x="15.9750%" y="357" width="6.8691%" height="15" fill="rgb(244,35,45)" fg:x="50922656" fg:w="21896105"/><text x="16.2250%" y="367.50">edna::map..</text></g><g><title>edna::mapping::Mapping::of (13,505,449 samples, 4.24%)</title><rect x="18.6073%" y="341" width="4.2368%" height="15" fill="rgb(251,115,12)" fg:x="59313312" fg:w="13505449"/><text x="18.8573%" y="351.50">edna:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (8,108,935 samples, 2.54%)</title><rect x="20.3002%" y="325" width="2.5439%" height="15" fill="rgb(240,54,50)" fg:x="64709826" fg:w="8108935"/><text x="20.5502%" y="335.50">co..</text></g><g><title>edna::mapping::Mapping::of::_{{closure}} (4,074,970 samples, 1.28%)</title><rect x="21.5657%" y="309" width="1.2784%" height="15" fill="rgb(233,84,52)" fg:x="68743791" fg:w="4074970"/><text x="21.8157%" y="319.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (4,074,970 samples, 1.28%)</title><rect x="21.5657%" y="293" width="1.2784%" height="15" fill="rgb(207,117,47)" fg:x="68743791" fg:w="4074970"/><text x="21.8157%" y="303.50"></text></g><g><title>core::ops::range::RangeBounds::contains (4,074,970 samples, 1.28%)</title><rect x="21.5657%" y="277" width="1.2784%" height="15" fill="rgb(249,43,39)" fg:x="68743791" fg:w="4074970"/><text x="21.8157%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (4,074,970 samples, 1.28%)</title><rect x="21.5657%" y="261" width="1.2784%" height="15" fill="rgb(209,38,44)" fg:x="68743791" fg:w="4074970"/><text x="21.8157%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for char&gt;::le (4,074,970 samples, 1.28%)</title><rect x="21.5657%" y="245" width="1.2784%" height="15" fill="rgb(236,212,23)" fg:x="68743791" fg:w="4074970"/><text x="21.8157%" y="255.50"></text></g><g><title>edna::map_validate (38,101,793 samples, 11.95%)</title><rect x="12.1674%" y="373" width="11.9530%" height="15" fill="rgb(242,79,21)" fg:x="38785240" fg:w="38101793"/><text x="12.4174%" y="383.50">edna::map_validate</text></g><g><title>edna::mapping::Mapping::of (4,068,272 samples, 1.28%)</title><rect x="22.8441%" y="357" width="1.2763%" height="15" fill="rgb(211,96,35)" fg:x="72818761" fg:w="4068272"/><text x="23.0941%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (4,068,272 samples, 1.28%)</title><rect x="22.8441%" y="341" width="1.2763%" height="15" fill="rgb(253,215,40)" fg:x="72818761" fg:w="4068272"/><text x="23.0941%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (4,068,272 samples, 1.28%)</title><rect x="22.8441%" y="325" width="1.2763%" height="15" fill="rgb(211,81,21)" fg:x="72818761" fg:w="4068272"/><text x="23.0941%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (4,068,272 samples, 1.28%)</title><rect x="22.8441%" y="309" width="1.2763%" height="15" fill="rgb(208,190,38)" fg:x="72818761" fg:w="4068272"/><text x="23.0941%" y="319.50"></text></g><g><title>core::slice::index::get_noubcheck (4,068,272 samples, 1.28%)</title><rect x="22.8441%" y="293" width="1.2763%" height="15" fill="rgb(235,213,38)" fg:x="72818761" fg:w="4068272"/><text x="23.0941%" y="303.50"></text></g><g><title>alloc::string::String::push (4,046,089 samples, 1.27%)</title><rect x="34.6288%" y="357" width="1.2693%" height="15" fill="rgb(237,122,38)" fg:x="110384151" fg:w="4046089"/><text x="34.8788%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,046,089 samples, 1.27%)</title><rect x="34.6288%" y="341" width="1.2693%" height="15" fill="rgb(244,218,35)" fg:x="110384151" fg:w="4046089"/><text x="34.8788%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4,046,089 samples, 1.27%)</title><rect x="34.6288%" y="325" width="1.2693%" height="15" fill="rgb(240,68,47)" fg:x="110384151" fg:w="4046089"/><text x="34.8788%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (4,046,089 samples, 1.27%)</title><rect x="34.6288%" y="309" width="1.2693%" height="15" fill="rgb(210,16,53)" fg:x="110384151" fg:w="4046089"/><text x="34.8788%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4,046,089 samples, 1.27%)</title><rect x="34.6288%" y="293" width="1.2693%" height="15" fill="rgb(235,124,12)" fg:x="110384151" fg:w="4046089"/><text x="34.8788%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (4,046,089 samples, 1.27%)</title><rect x="34.6288%" y="277" width="1.2693%" height="15" fill="rgb(224,169,11)" fg:x="110384151" fg:w="4046089"/><text x="34.8788%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (16,740,041 samples, 5.25%)</title><rect x="35.8981%" y="357" width="5.2515%" height="15" fill="rgb(250,166,2)" fg:x="114430240" fg:w="16740041"/><text x="36.1481%" y="367.50">core::..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (8,042,920 samples, 2.52%)</title><rect x="41.1496%" y="261" width="2.5232%" height="15" fill="rgb(242,216,29)" fg:x="131170281" fg:w="8042920"/><text x="41.3996%" y="271.50">&lt;c..</text></g><g><title>core::str::validations::next_code_point (8,042,920 samples, 2.52%)</title><rect x="41.1496%" y="245" width="2.5232%" height="15" fill="rgb(230,116,27)" fg:x="131170281" fg:w="8042920"/><text x="41.3996%" y="255.50">co..</text></g><g><title>core::str::validations::utf8_first_byte (4,001,207 samples, 1.26%)</title><rect x="42.4176%" y="229" width="1.2552%" height="15" fill="rgb(228,99,48)" fg:x="135211994" fg:w="4001207"/><text x="42.6676%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4,041,036 samples, 1.27%)</title><rect x="44.9518%" y="117" width="1.2677%" height="15" fill="rgb(253,11,6)" fg:x="143290410" fg:w="4041036"/><text x="45.2018%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4,041,036 samples, 1.27%)</title><rect x="44.9518%" y="101" width="1.2677%" height="15" fill="rgb(247,143,39)" fg:x="143290410" fg:w="4041036"/><text x="45.2018%" y="111.50"></text></g><g><title>alloc::alloc::realloc (4,041,036 samples, 1.27%)</title><rect x="44.9518%" y="85" width="1.2677%" height="15" fill="rgb(236,97,10)" fg:x="143290410" fg:w="4041036"/><text x="45.2018%" y="95.50"></text></g><g><title>__rust_realloc (4,041,036 samples, 1.27%)</title><rect x="44.9518%" y="69" width="1.2677%" height="15" fill="rgb(233,208,19)" fg:x="143290410" fg:w="4041036"/><text x="45.2018%" y="79.50"></text></g><g><title>core::alloc::global::GlobalAlloc::realloc (4,041,036 samples, 1.27%)</title><rect x="44.9518%" y="53" width="1.2677%" height="15" fill="rgb(216,164,2)" fg:x="143290410" fg:w="4041036"/><text x="45.2018%" y="63.50"></text></g><g><title>&lt;rpmalloc::RpMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (4,041,036 samples, 1.27%)</title><rect x="44.9518%" y="37" width="1.2677%" height="15" fill="rgb(220,129,5)" fg:x="143290410" fg:w="4041036"/><text x="45.2018%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (20,188,857 samples, 6.33%)</title><rect x="41.1496%" y="341" width="6.3335%" height="15" fill="rgb(242,17,10)" fg:x="131170281" fg:w="20188857"/><text x="41.3996%" y="351.50">&lt;alloc::..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (20,188,857 samples, 6.33%)</title><rect x="41.1496%" y="325" width="6.3335%" height="15" fill="rgb(242,107,0)" fg:x="131170281" fg:w="20188857"/><text x="41.3996%" y="335.50">&lt;alloc::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (20,188,857 samples, 6.33%)</title><rect x="41.1496%" y="309" width="6.3335%" height="15" fill="rgb(251,28,31)" fg:x="131170281" fg:w="20188857"/><text x="41.3996%" y="319.50">core::it..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20,188,857 samples, 6.33%)</title><rect x="41.1496%" y="293" width="6.3335%" height="15" fill="rgb(233,223,10)" fg:x="131170281" fg:w="20188857"/><text x="41.3996%" y="303.50">&lt;core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (20,188,857 samples, 6.33%)</title><rect x="41.1496%" y="277" width="6.3335%" height="15" fill="rgb(215,21,27)" fg:x="131170281" fg:w="20188857"/><text x="41.3996%" y="287.50">core::it..</text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (12,145,937 samples, 3.81%)</title><rect x="43.6728%" y="261" width="3.8103%" height="15" fill="rgb(232,23,21)" fg:x="139213201" fg:w="12145937"/><text x="43.9228%" y="271.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (8,068,728 samples, 2.53%)</title><rect x="44.9518%" y="245" width="2.5313%" height="15" fill="rgb(244,5,23)" fg:x="143290410" fg:w="8068728"/><text x="45.2018%" y="255.50">co..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::_{{closure}} (8,068,728 samples, 2.53%)</title><rect x="44.9518%" y="229" width="2.5313%" height="15" fill="rgb(226,81,46)" fg:x="143290410" fg:w="8068728"/><text x="45.2018%" y="239.50">&lt;a..</text></g><g><title>alloc::string::String::push (8,068,728 samples, 2.53%)</title><rect x="44.9518%" y="213" width="2.5313%" height="15" fill="rgb(247,70,30)" fg:x="143290410" fg:w="8068728"/><text x="45.2018%" y="223.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8,068,728 samples, 2.53%)</title><rect x="44.9518%" y="197" width="2.5313%" height="15" fill="rgb(212,68,19)" fg:x="143290410" fg:w="8068728"/><text x="45.2018%" y="207.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8,068,728 samples, 2.53%)</title><rect x="44.9518%" y="181" width="2.5313%" height="15" fill="rgb(240,187,13)" fg:x="143290410" fg:w="8068728"/><text x="45.2018%" y="191.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (8,068,728 samples, 2.53%)</title><rect x="44.9518%" y="165" width="2.5313%" height="15" fill="rgb(223,113,26)" fg:x="143290410" fg:w="8068728"/><text x="45.2018%" y="175.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (8,068,728 samples, 2.53%)</title><rect x="44.9518%" y="149" width="2.5313%" height="15" fill="rgb(206,192,2)" fg:x="143290410" fg:w="8068728"/><text x="45.2018%" y="159.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (8,068,728 samples, 2.53%)</title><rect x="44.9518%" y="133" width="2.5313%" height="15" fill="rgb(241,108,4)" fg:x="143290410" fg:w="8068728"/><text x="45.2018%" y="143.50">al..</text></g><g><title>_rpmalloc_allocate (4,027,692 samples, 1.26%)</title><rect x="46.2196%" y="117" width="1.2635%" height="15" fill="rgb(247,173,49)" fg:x="147331446" fg:w="4027692"/><text x="46.4696%" y="127.50"></text></g><g><title>_rpmalloc_aligned_allocate (4,055,500 samples, 1.27%)</title><rect x="47.4831%" y="69" width="1.2723%" height="15" fill="rgb(224,114,35)" fg:x="151359138" fg:w="4055500"/><text x="47.7331%" y="79.50"></text></g><g><title>&lt;rpmalloc::RpMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (8,097,982 samples, 2.54%)</title><rect x="47.4831%" y="85" width="2.5404%" height="15" fill="rgb(245,159,27)" fg:x="151359138" fg:w="8097982"/><text x="47.7331%" y="95.50">&lt;r..</text></g><g><title>_rpmalloc_allocate (4,042,482 samples, 1.27%)</title><rect x="48.7554%" y="69" width="1.2682%" height="15" fill="rgb(245,172,44)" fg:x="155414638" fg:w="4042482"/><text x="49.0054%" y="79.50"></text></g><g><title>_rpmalloc_allocate_small (4,042,482 samples, 1.27%)</title><rect x="48.7554%" y="53" width="1.2682%" height="15" fill="rgb(236,23,11)" fg:x="155414638" fg:w="4042482"/><text x="49.0054%" y="63.50"></text></g><g><title>free_list_pop (4,042,482 samples, 1.27%)</title><rect x="48.7554%" y="37" width="1.2682%" height="15" fill="rgb(205,117,38)" fg:x="155414638" fg:w="4042482"/><text x="49.0054%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (12,163,279 samples, 3.82%)</title><rect x="47.4831%" y="261" width="3.8158%" height="15" fill="rgb(237,72,25)" fg:x="151359138" fg:w="12163279"/><text x="47.7331%" y="271.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12,163,279 samples, 3.82%)</title><rect x="47.4831%" y="245" width="3.8158%" height="15" fill="rgb(244,70,9)" fg:x="151359138" fg:w="12163279"/><text x="47.7331%" y="255.50">allo..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (12,163,279 samples, 3.82%)</title><rect x="47.4831%" y="229" width="3.8158%" height="15" fill="rgb(217,125,39)" fg:x="151359138" fg:w="12163279"/><text x="47.7331%" y="239.50">allo..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (12,163,279 samples, 3.82%)</title><rect x="47.4831%" y="213" width="3.8158%" height="15" fill="rgb(235,36,10)" fg:x="151359138" fg:w="12163279"/><text x="47.7331%" y="223.50">allo..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (12,163,279 samples, 3.82%)</title><rect x="47.4831%" y="197" width="3.8158%" height="15" fill="rgb(251,123,47)" fg:x="151359138" fg:w="12163279"/><text x="47.7331%" y="207.50">allo..</text></g><g><title>alloc::raw_vec::finish_grow (12,163,279 samples, 3.82%)</title><rect x="47.4831%" y="181" width="3.8158%" height="15" fill="rgb(221,13,13)" fg:x="151359138" fg:w="12163279"/><text x="47.7331%" y="191.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (12,163,279 samples, 3.82%)</title><rect x="47.4831%" y="165" width="3.8158%" height="15" fill="rgb(238,131,9)" fg:x="151359138" fg:w="12163279"/><text x="47.7331%" y="175.50">&lt;all..</text></g><g><title>alloc::alloc::Global::grow_impl (12,163,279 samples, 3.82%)</title><rect x="47.4831%" y="149" width="3.8158%" height="15" fill="rgb(211,50,8)" fg:x="151359138" fg:w="12163279"/><text x="47.7331%" y="159.50">allo..</text></g><g><title>alloc::alloc::realloc (12,163,279 samples, 3.82%)</title><rect x="47.4831%" y="133" width="3.8158%" height="15" fill="rgb(245,182,24)" fg:x="151359138" fg:w="12163279"/><text x="47.7331%" y="143.50">allo..</text></g><g><title>__rust_realloc (12,163,279 samples, 3.82%)</title><rect x="47.4831%" y="117" width="3.8158%" height="15" fill="rgb(242,14,37)" fg:x="151359138" fg:w="12163279"/><text x="47.7331%" y="127.50">__ru..</text></g><g><title>core::alloc::global::GlobalAlloc::realloc (12,163,279 samples, 3.82%)</title><rect x="47.4831%" y="101" width="3.8158%" height="15" fill="rgb(246,228,12)" fg:x="151359138" fg:w="12163279"/><text x="47.7331%" y="111.50">core..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4,065,297 samples, 1.28%)</title><rect x="50.0235%" y="85" width="1.2753%" height="15" fill="rgb(213,55,15)" fg:x="159457120" fg:w="4065297"/><text x="50.2735%" y="95.50"></text></g><g><title>[libc.so.6] (4,065,297 samples, 1.28%)</title><rect x="50.0235%" y="69" width="1.2753%" height="15" fill="rgb(209,9,3)" fg:x="159457120" fg:w="4065297"/><text x="50.2735%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (36,382,130 samples, 11.41%)</title><rect x="41.1496%" y="357" width="11.4135%" height="15" fill="rgb(230,59,30)" fg:x="131170281" fg:w="36382130"/><text x="41.3996%" y="367.50">core::iter::trait..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (16,193,273 samples, 5.08%)</title><rect x="47.4831%" y="341" width="5.0800%" height="15" fill="rgb(209,121,21)" fg:x="151359138" fg:w="16193273"/><text x="47.7331%" y="351.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16,193,273 samples, 5.08%)</title><rect x="47.4831%" y="325" width="5.0800%" height="15" fill="rgb(220,109,13)" fg:x="151359138" fg:w="16193273"/><text x="47.7331%" y="335.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (16,193,273 samples, 5.08%)</title><rect x="47.4831%" y="309" width="5.0800%" height="15" fill="rgb(232,18,1)" fg:x="151359138" fg:w="16193273"/><text x="47.7331%" y="319.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16,193,273 samples, 5.08%)</title><rect x="47.4831%" y="293" width="5.0800%" height="15" fill="rgb(215,41,42)" fg:x="151359138" fg:w="16193273"/><text x="47.7331%" y="303.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (16,193,273 samples, 5.08%)</title><rect x="47.4831%" y="277" width="5.0800%" height="15" fill="rgb(224,123,36)" fg:x="151359138" fg:w="16193273"/><text x="47.7331%" y="287.50">alloc:..</text></g><g><title>core::ptr::write (4,029,994 samples, 1.26%)</title><rect x="51.2989%" y="261" width="1.2643%" height="15" fill="rgb(240,125,3)" fg:x="163522417" fg:w="4029994"/><text x="51.5489%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (48,385,825 samples, 15.18%)</title><rect x="52.5631%" y="309" width="15.1792%" height="15" fill="rgb(205,98,50)" fg:x="167552411" fg:w="48385825"/><text x="52.8131%" y="319.50">&lt;core::iter::adapters::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (48,385,825 samples, 15.18%)</title><rect x="52.5631%" y="293" width="15.1792%" height="15" fill="rgb(205,185,37)" fg:x="167552411" fg:w="48385825"/><text x="52.8131%" y="303.50">&lt;core::slice::iter::Ite..</text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (38,149,057 samples, 11.97%)</title><rect x="55.7745%" y="277" width="11.9678%" height="15" fill="rgb(238,207,15)" fg:x="177789179" fg:w="38149057"/><text x="56.0245%" y="287.50">core::iter::adapte..</text></g><g><title>edna::punycode::encode::_{{closure}} (29,452,241 samples, 9.24%)</title><rect x="58.5028%" y="261" width="9.2395%" height="15" fill="rgb(213,199,42)" fg:x="186485995" fg:w="29452241"/><text x="58.7528%" y="271.50">edna::punycod..</text></g><g><title>core::iter::traits::iterator::Iterator::min (52,420,118 samples, 16.44%)</title><rect x="52.5631%" y="357" width="16.4448%" height="15" fill="rgb(235,201,11)" fg:x="167552411" fg:w="52420118"/><text x="52.8131%" y="367.50">core::iter::traits::itera..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (52,420,118 samples, 16.44%)</title><rect x="52.5631%" y="341" width="16.4448%" height="15" fill="rgb(207,46,11)" fg:x="167552411" fg:w="52420118"/><text x="52.8131%" y="351.50">core::iter::traits::itera..</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (52,420,118 samples, 16.44%)</title><rect x="52.5631%" y="325" width="16.4448%" height="15" fill="rgb(241,35,35)" fg:x="167552411" fg:w="52420118"/><text x="52.8131%" y="335.50">core::iter::traits::itera..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,034,293 samples, 1.27%)</title><rect x="67.7423%" y="309" width="1.2656%" height="15" fill="rgb(243,32,47)" fg:x="215938236" fg:w="4034293"/><text x="67.9923%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (4,034,293 samples, 1.27%)</title><rect x="67.7423%" y="293" width="1.2656%" height="15" fill="rgb(247,202,23)" fg:x="215938236" fg:w="4034293"/><text x="67.9923%" y="303.50"></text></g><g><title>edna::punycode::encode (217,655,335 samples, 68.28%)</title><rect x="24.1203%" y="373" width="68.2810%" height="15" fill="rgb(219,102,11)" fg:x="76887033" fg:w="217655335"/><text x="24.3703%" y="383.50">edna::punycode::encode</text></g><g><title>edna::punycode::adapt (74,569,839 samples, 23.39%)</title><rect x="69.0079%" y="357" width="23.3934%" height="15" fill="rgb(243,110,44)" fg:x="219972529" fg:w="74569839"/><text x="69.2579%" y="367.50">edna::punycode::adapt</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (8,038,837 samples, 2.52%)</title><rect x="92.4013%" y="341" width="2.5219%" height="15" fill="rgb(222,74,54)" fg:x="294542368" fg:w="8038837"/><text x="92.6513%" y="351.50">&lt;c..</text></g><g><title>core::str::validations::next_code_point (8,038,837 samples, 2.52%)</title><rect x="92.4013%" y="325" width="2.5219%" height="15" fill="rgb(216,99,12)" fg:x="294542368" fg:w="8038837"/><text x="92.6513%" y="335.50">co..</text></g><g><title>core::ops::function::Fn::call (12,152,432 samples, 3.81%)</title><rect x="94.9232%" y="341" width="3.8124%" height="15" fill="rgb(226,22,26)" fg:x="302581205" fg:w="12152432"/><text x="95.1732%" y="351.50">core..</text></g><g><title>unicode_normalization::tables::qc_nfc (12,152,432 samples, 3.81%)</title><rect x="94.9232%" y="325" width="3.8124%" height="15" fill="rgb(217,163,10)" fg:x="302581205" fg:w="12152432"/><text x="95.1732%" y="335.50">unic..</text></g><g><title>all (318,764,264 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="318764264"/><text x="0.2500%" y="495.50"></text></g><g><title>flamegraph-bed4 (318,764,264 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="318764264"/><text x="0.2500%" y="479.50">flamegraph-bed4</text></g><g><title>_start (303,559,456 samples, 95.23%)</title><rect x="4.7699%" y="453" width="95.2301%" height="15" fill="rgb(220,39,43)" fg:x="15204808" fg:w="303559456"/><text x="5.0199%" y="463.50">_start</text></g><g><title>__libc_start_main (303,559,456 samples, 95.23%)</title><rect x="4.7699%" y="437" width="95.2301%" height="15" fill="rgb(229,68,48)" fg:x="15204808" fg:w="303559456"/><text x="5.0199%" y="447.50">__libc_start_main</text></g><g><title>[libc.so.6] (303,559,456 samples, 95.23%)</title><rect x="4.7699%" y="421" width="95.2301%" height="15" fill="rgb(252,8,32)" fg:x="15204808" fg:w="303559456"/><text x="5.0199%" y="431.50">[libc.so.6]</text></g><g><title>main (303,559,456 samples, 95.23%)</title><rect x="4.7699%" y="405" width="95.2301%" height="15" fill="rgb(223,20,43)" fg:x="15204808" fg:w="303559456"/><text x="5.0199%" y="415.50">main</text></g><g><title>edna::to_ascii (296,343,999 samples, 92.97%)</title><rect x="7.0335%" y="389" width="92.9665%" height="15" fill="rgb(229,81,49)" fg:x="22420265" fg:w="296343999"/><text x="7.2835%" y="399.50">edna::to_ascii</text></g><g><title>unicode_normalization::quick_check::is_nfc_quick (24,221,896 samples, 7.60%)</title><rect x="92.4013%" y="373" width="7.5987%" height="15" fill="rgb(236,28,36)" fg:x="294542368" fg:w="24221896"/><text x="92.6513%" y="383.50">unicode_no..</text></g><g><title>unicode_normalization::quick_check::quick_check (24,221,896 samples, 7.60%)</title><rect x="92.4013%" y="357" width="7.5987%" height="15" fill="rgb(249,185,26)" fg:x="294542368" fg:w="24221896"/><text x="92.6513%" y="367.50">unicode_no..</text></g><g><title>unicode_normalization::lookups::canonical_combining_class (4,030,627 samples, 1.26%)</title><rect x="98.7355%" y="341" width="1.2645%" height="15" fill="rgb(249,174,33)" fg:x="314733637" fg:w="4030627"/><text x="98.9855%" y="351.50"></text></g><g><title>unicode_normalization::perfect_hash::mph_lookup (4,030,627 samples, 1.26%)</title><rect x="98.7355%" y="325" width="1.2645%" height="15" fill="rgb(233,201,37)" fg:x="314733637" fg:w="4030627"/><text x="98.9855%" y="335.50"></text></g><g><title>core::ops::function::Fn::call (4,030,627 samples, 1.26%)</title><rect x="98.7355%" y="309" width="1.2645%" height="15" fill="rgb(221,78,26)" fg:x="314733637" fg:w="4030627"/><text x="98.9855%" y="319.50"></text></g><g><title>unicode_normalization::lookups::u8_lookup_fk (4,030,627 samples, 1.26%)</title><rect x="98.7355%" y="293" width="1.2645%" height="15" fill="rgb(250,127,30)" fg:x="314733637" fg:w="4030627"/><text x="98.9855%" y="303.50"></text></g></svg></svg>