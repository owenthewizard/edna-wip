<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="244146335"><g><title>[ld-linux-x86-64.so.2] (2,015,074 samples, 0.83%)</title><rect x="0.0000%" y="325" width="0.8254%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2015074"/><text x="0.2500%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,942,592 samples, 0.80%)</title><rect x="0.0297%" y="309" width="0.7957%" height="15" fill="rgb(217,0,24)" fg:x="72482" fg:w="1942592"/><text x="0.2797%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,942,592 samples, 0.80%)</title><rect x="0.0297%" y="293" width="0.7957%" height="15" fill="rgb(221,193,54)" fg:x="72482" fg:w="1942592"/><text x="0.2797%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,942,592 samples, 0.80%)</title><rect x="0.0297%" y="277" width="0.7957%" height="15" fill="rgb(248,212,6)" fg:x="72482" fg:w="1942592"/><text x="0.2797%" y="287.50"></text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (8,204,922 samples, 3.36%)</title><rect x="2.4665%" y="261" width="3.3607%" height="15" fill="rgb(208,68,35)" fg:x="6021749" fg:w="8204922"/><text x="2.7165%" y="271.50">&lt;[T..</text></g><g><title>rand::seq::gen_index (8,204,922 samples, 3.36%)</title><rect x="2.4665%" y="245" width="3.3607%" height="15" fill="rgb(232,128,0)" fg:x="6021749" fg:w="8204922"/><text x="2.7165%" y="255.50">ran..</text></g><g><title>rand::rng::Rng::gen_range (8,204,922 samples, 3.36%)</title><rect x="2.4665%" y="229" width="3.3607%" height="15" fill="rgb(207,160,47)" fg:x="6021749" fg:w="8204922"/><text x="2.7165%" y="239.50">ran..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (8,204,922 samples, 3.36%)</title><rect x="2.4665%" y="213" width="3.3607%" height="15" fill="rgb(228,23,34)" fg:x="6021749" fg:w="8204922"/><text x="2.7165%" y="223.50">&lt;co..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (8,204,922 samples, 3.36%)</title><rect x="2.4665%" y="197" width="3.3607%" height="15" fill="rgb(218,30,26)" fg:x="6021749" fg:w="8204922"/><text x="2.7165%" y="207.50">&lt;ra..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (8,204,922 samples, 3.36%)</title><rect x="2.4665%" y="181" width="3.3607%" height="15" fill="rgb(220,122,19)" fg:x="6021749" fg:w="8204922"/><text x="2.7165%" y="191.50">&lt;ra..</text></g><g><title>core::slice::memchr::memchr_aligned (4,366,107 samples, 1.79%)</title><rect x="5.8271%" y="165" width="1.7883%" height="15" fill="rgb(250,228,42)" fg:x="14226671" fg:w="4366107"/><text x="6.0771%" y="175.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (4,366,107 samples, 1.79%)</title><rect x="5.8271%" y="149" width="1.7883%" height="15" fill="rgb(240,193,28)" fg:x="14226671" fg:w="4366107"/><text x="6.0771%" y="159.50">c..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,992,590 samples, 3.68%)</title><rect x="5.8271%" y="229" width="3.6833%" height="15" fill="rgb(216,20,37)" fg:x="14226671" fg:w="8992590"/><text x="6.0771%" y="239.50">&lt;cor..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (8,992,590 samples, 3.68%)</title><rect x="5.8271%" y="213" width="3.6833%" height="15" fill="rgb(206,188,39)" fg:x="14226671" fg:w="8992590"/><text x="6.0771%" y="223.50">core..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (8,992,590 samples, 3.68%)</title><rect x="5.8271%" y="197" width="3.6833%" height="15" fill="rgb(217,207,13)" fg:x="14226671" fg:w="8992590"/><text x="6.0771%" y="207.50">&lt;cor..</text></g><g><title>core::slice::memchr::memchr (8,992,590 samples, 3.68%)</title><rect x="5.8271%" y="181" width="3.6833%" height="15" fill="rgb(231,73,38)" fg:x="14226671" fg:w="8992590"/><text x="6.0771%" y="191.50">core..</text></g><g><title>core::slice::memchr::memchr_naive (4,626,483 samples, 1.89%)</title><rect x="7.6154%" y="165" width="1.8950%" height="15" fill="rgb(225,20,46)" fg:x="18592778" fg:w="4626483"/><text x="7.8654%" y="175.50">c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18,829,686 samples, 7.71%)</title><rect x="5.8271%" y="245" width="7.7125%" height="15" fill="rgb(210,31,41)" fg:x="14226671" fg:w="18829686"/><text x="6.0771%" y="255.50">&lt;core::iter..</text></g><g><title>core::option::Option&lt;T&gt;::map (9,837,096 samples, 4.03%)</title><rect x="9.5104%" y="229" width="4.0292%" height="15" fill="rgb(221,200,47)" fg:x="23219261" fg:w="9837096"/><text x="9.7604%" y="239.50">core..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9,837,096 samples, 4.03%)</title><rect x="9.5104%" y="213" width="4.0292%" height="15" fill="rgb(226,26,5)" fg:x="23219261" fg:w="9837096"/><text x="9.7604%" y="223.50">core..</text></g><g><title>edna::to_ascii::_{{closure}} (9,837,096 samples, 4.03%)</title><rect x="9.5104%" y="197" width="4.0292%" height="15" fill="rgb(249,33,26)" fg:x="23219261" fg:w="9837096"/><text x="9.7604%" y="207.50">edna..</text></g><g><title>core::str::&lt;impl str&gt;::split_once (9,837,096 samples, 4.03%)</title><rect x="9.5104%" y="181" width="4.0292%" height="15" fill="rgb(235,183,28)" fg:x="23219261" fg:w="9837096"/><text x="9.7604%" y="191.50">core..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (9,837,096 samples, 4.03%)</title><rect x="9.5104%" y="165" width="4.0292%" height="15" fill="rgb(221,5,38)" fg:x="23219261" fg:w="9837096"/><text x="9.7604%" y="175.50">&lt;cor..</text></g><g><title>core::slice::memchr::memchr (9,837,096 samples, 4.03%)</title><rect x="9.5104%" y="149" width="4.0292%" height="15" fill="rgb(247,18,42)" fg:x="23219261" fg:w="9837096"/><text x="9.7604%" y="159.50">core..</text></g><g><title>core::slice::memchr::memchr_aligned (9,837,096 samples, 4.03%)</title><rect x="9.5104%" y="133" width="4.0292%" height="15" fill="rgb(241,131,45)" fg:x="23219261" fg:w="9837096"/><text x="9.7604%" y="143.50">core..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (9,837,096 samples, 4.03%)</title><rect x="9.5104%" y="117" width="4.0292%" height="15" fill="rgb(249,31,29)" fg:x="23219261" fg:w="9837096"/><text x="9.7604%" y="127.50">core..</text></g><g><title>core::slice::memchr::contains_zero_byte (4,032,262 samples, 1.65%)</title><rect x="11.8880%" y="101" width="1.6516%" height="15" fill="rgb(225,111,53)" fg:x="29024095" fg:w="4032262"/><text x="12.1380%" y="111.50"></text></g><g><title>alloc::string::String::push_str (4,043,355 samples, 1.66%)</title><rect x="13.5396%" y="245" width="1.6561%" height="15" fill="rgb(238,160,17)" fg:x="33056357" fg:w="4043355"/><text x="13.7896%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4,043,355 samples, 1.66%)</title><rect x="13.5396%" y="229" width="1.6561%" height="15" fill="rgb(214,148,48)" fg:x="33056357" fg:w="4043355"/><text x="13.7896%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4,043,355 samples, 1.66%)</title><rect x="13.5396%" y="213" width="1.6561%" height="15" fill="rgb(232,36,49)" fg:x="33056357" fg:w="4043355"/><text x="13.7896%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4,043,355 samples, 1.66%)</title><rect x="13.5396%" y="197" width="1.6561%" height="15" fill="rgb(209,103,24)" fg:x="33056357" fg:w="4043355"/><text x="13.7896%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,043,355 samples, 1.66%)</title><rect x="13.5396%" y="181" width="1.6561%" height="15" fill="rgb(229,88,8)" fg:x="33056357" fg:w="4043355"/><text x="13.7896%" y="191.50"></text></g><g><title>[libc.so.6] (4,043,355 samples, 1.66%)</title><rect x="13.5396%" y="165" width="1.6561%" height="15" fill="rgb(213,181,19)" fg:x="33056357" fg:w="4043355"/><text x="13.7896%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (4,303,072 samples, 1.76%)</title><rect x="15.1957%" y="245" width="1.7625%" height="15" fill="rgb(254,191,54)" fg:x="37099712" fg:w="4303072"/><text x="15.4457%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4,303,072 samples, 1.76%)</title><rect x="15.1957%" y="229" width="1.7625%" height="15" fill="rgb(241,83,37)" fg:x="37099712" fg:w="4303072"/><text x="15.4457%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4,303,072 samples, 1.76%)</title><rect x="15.1957%" y="213" width="1.7625%" height="15" fill="rgb(233,36,39)" fg:x="37099712" fg:w="4303072"/><text x="15.4457%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,303,072 samples, 1.76%)</title><rect x="15.1957%" y="197" width="1.7625%" height="15" fill="rgb(226,3,54)" fg:x="37099712" fg:w="4303072"/><text x="15.4457%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,303,072 samples, 1.76%)</title><rect x="15.1957%" y="181" width="1.7625%" height="15" fill="rgb(245,192,40)" fg:x="37099712" fg:w="4303072"/><text x="15.4457%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,303,072 samples, 1.76%)</title><rect x="15.1957%" y="165" width="1.7625%" height="15" fill="rgb(238,167,29)" fg:x="37099712" fg:w="4303072"/><text x="15.4457%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,303,072 samples, 1.76%)</title><rect x="15.1957%" y="149" width="1.7625%" height="15" fill="rgb(232,182,51)" fg:x="37099712" fg:w="4303072"/><text x="15.4457%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (4,303,072 samples, 1.76%)</title><rect x="15.1957%" y="133" width="1.7625%" height="15" fill="rgb(231,60,39)" fg:x="37099712" fg:w="4303072"/><text x="15.4457%" y="143.50"></text></g><g><title>__rdl_dealloc (4,303,072 samples, 1.76%)</title><rect x="15.1957%" y="117" width="1.7625%" height="15" fill="rgb(208,69,12)" fg:x="37099712" fg:w="4303072"/><text x="15.4457%" y="127.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4,303,072 samples, 1.76%)</title><rect x="15.1957%" y="101" width="1.7625%" height="15" fill="rgb(235,93,37)" fg:x="37099712" fg:w="4303072"/><text x="15.4457%" y="111.50"></text></g><g><title>cfree (4,303,072 samples, 1.76%)</title><rect x="15.1957%" y="85" width="1.7625%" height="15" fill="rgb(213,116,39)" fg:x="37099712" fg:w="4303072"/><text x="15.4457%" y="95.50"></text></g><g><title>[libc.so.6] (4,303,072 samples, 1.76%)</title><rect x="15.1957%" y="69" width="1.7625%" height="15" fill="rgb(222,207,29)" fg:x="37099712" fg:w="4303072"/><text x="15.4457%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4,096,588 samples, 1.68%)</title><rect x="16.9582%" y="245" width="1.6779%" height="15" fill="rgb(206,96,30)" fg:x="41402784" fg:w="4096588"/><text x="17.2082%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4,096,588 samples, 1.68%)</title><rect x="16.9582%" y="229" width="1.6779%" height="15" fill="rgb(218,138,4)" fg:x="41402784" fg:w="4096588"/><text x="17.2082%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,096,588 samples, 1.68%)</title><rect x="16.9582%" y="213" width="1.6779%" height="15" fill="rgb(250,191,14)" fg:x="41402784" fg:w="4096588"/><text x="17.2082%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,096,588 samples, 1.68%)</title><rect x="16.9582%" y="197" width="1.6779%" height="15" fill="rgb(239,60,40)" fg:x="41402784" fg:w="4096588"/><text x="17.2082%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,096,588 samples, 1.68%)</title><rect x="16.9582%" y="181" width="1.6779%" height="15" fill="rgb(206,27,48)" fg:x="41402784" fg:w="4096588"/><text x="17.2082%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,096,588 samples, 1.68%)</title><rect x="16.9582%" y="165" width="1.6779%" height="15" fill="rgb(225,35,8)" fg:x="41402784" fg:w="4096588"/><text x="17.2082%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (4,096,588 samples, 1.68%)</title><rect x="16.9582%" y="149" width="1.6779%" height="15" fill="rgb(250,213,24)" fg:x="41402784" fg:w="4096588"/><text x="17.2082%" y="159.50"></text></g><g><title>__rdl_dealloc (4,096,588 samples, 1.68%)</title><rect x="16.9582%" y="133" width="1.6779%" height="15" fill="rgb(247,123,22)" fg:x="41402784" fg:w="4096588"/><text x="17.2082%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4,096,588 samples, 1.68%)</title><rect x="16.9582%" y="117" width="1.6779%" height="15" fill="rgb(231,138,38)" fg:x="41402784" fg:w="4096588"/><text x="17.2082%" y="127.50"></text></g><g><title>cfree (4,096,588 samples, 1.68%)</title><rect x="16.9582%" y="101" width="1.6779%" height="15" fill="rgb(231,145,46)" fg:x="41402784" fg:w="4096588"/><text x="17.2082%" y="111.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_ascii (9,444,176 samples, 3.87%)</title><rect x="18.6361%" y="245" width="3.8682%" height="15" fill="rgb(251,118,11)" fg:x="45499372" fg:w="9444176"/><text x="18.8861%" y="255.50">core..</text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (9,444,176 samples, 3.87%)</title><rect x="18.6361%" y="229" width="3.8682%" height="15" fill="rgb(217,147,25)" fg:x="45499372" fg:w="9444176"/><text x="18.8861%" y="239.50">core..</text></g><g><title>core::slice::ascii::is_ascii (9,444,176 samples, 3.87%)</title><rect x="18.6361%" y="213" width="3.8682%" height="15" fill="rgb(247,81,37)" fg:x="45499372" fg:w="9444176"/><text x="18.8861%" y="223.50">core..</text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii (9,444,176 samples, 3.87%)</title><rect x="18.6361%" y="197" width="3.8682%" height="15" fill="rgb(209,12,38)" fg:x="45499372" fg:w="9444176"/><text x="18.8861%" y="207.50">core..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_unchecked (4,040,680 samples, 1.66%)</title><rect x="22.5044%" y="229" width="1.6550%" height="15" fill="rgb(227,1,9)" fg:x="54943548" fg:w="4040680"/><text x="22.7544%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_ascii (8,055,834 samples, 3.30%)</title><rect x="24.1594%" y="229" width="3.2996%" height="15" fill="rgb(248,47,43)" fg:x="58984228" fg:w="8055834"/><text x="24.4094%" y="239.50">cor..</text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (8,055,834 samples, 3.30%)</title><rect x="24.1594%" y="213" width="3.2996%" height="15" fill="rgb(221,10,30)" fg:x="58984228" fg:w="8055834"/><text x="24.4094%" y="223.50">cor..</text></g><g><title>core::slice::ascii::is_ascii (8,055,834 samples, 3.30%)</title><rect x="24.1594%" y="197" width="3.2996%" height="15" fill="rgb(210,229,1)" fg:x="58984228" fg:w="8055834"/><text x="24.4094%" y="207.50">cor..</text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii (4,031,932 samples, 1.65%)</title><rect x="25.8075%" y="181" width="1.6514%" height="15" fill="rgb(222,148,37)" fg:x="63008130" fg:w="4031932"/><text x="26.0575%" y="191.50"></text></g><g><title>edna::map_internal (8,083,856 samples, 3.31%)</title><rect x="27.4590%" y="229" width="3.3111%" height="15" fill="rgb(234,67,33)" fg:x="67040062" fg:w="8083856"/><text x="27.7090%" y="239.50">edn..</text></g><g><title>alloc::string::String::push (8,083,856 samples, 3.31%)</title><rect x="27.4590%" y="213" width="3.3111%" height="15" fill="rgb(247,98,35)" fg:x="67040062" fg:w="8083856"/><text x="27.7090%" y="223.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8,083,856 samples, 3.31%)</title><rect x="27.4590%" y="197" width="3.3111%" height="15" fill="rgb(247,138,52)" fg:x="67040062" fg:w="8083856"/><text x="27.7090%" y="207.50">all..</text></g><g><title>core::ptr::write (8,083,856 samples, 3.31%)</title><rect x="27.4590%" y="181" width="3.3111%" height="15" fill="rgb(213,79,30)" fg:x="67040062" fg:w="8083856"/><text x="27.7090%" y="191.50">cor..</text></g><g><title>edna::map_validate (44,458,828 samples, 18.21%)</title><rect x="22.5044%" y="245" width="18.2099%" height="15" fill="rgb(246,177,23)" fg:x="54943548" fg:w="44458828"/><text x="22.7544%" y="255.50">edna::map_validate</text></g><g><title>edna::mapping::Mapping::of (24,278,458 samples, 9.94%)</title><rect x="30.7700%" y="229" width="9.9442%" height="15" fill="rgb(230,62,27)" fg:x="75123918" fg:w="24278458"/><text x="31.0200%" y="239.50">edna::mapping:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (24,278,458 samples, 9.94%)</title><rect x="30.7700%" y="213" width="9.9442%" height="15" fill="rgb(216,154,8)" fg:x="75123918" fg:w="24278458"/><text x="31.0200%" y="223.50">core::slice::&lt;..</text></g><g><title>edna::mapping::Mapping::of::_{{closure}} (24,278,458 samples, 9.94%)</title><rect x="30.7700%" y="197" width="9.9442%" height="15" fill="rgb(244,35,45)" fg:x="75123918" fg:w="24278458"/><text x="31.0200%" y="207.50">edna::mapping:..</text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (24,278,458 samples, 9.94%)</title><rect x="30.7700%" y="181" width="9.9442%" height="15" fill="rgb(251,115,12)" fg:x="75123918" fg:w="24278458"/><text x="31.0200%" y="191.50">core::ops::ran..</text></g><g><title>core::ops::range::RangeBounds::contains (24,278,458 samples, 9.94%)</title><rect x="30.7700%" y="165" width="9.9442%" height="15" fill="rgb(240,54,50)" fg:x="75123918" fg:w="24278458"/><text x="31.0200%" y="175.50">core::ops::ran..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (24,278,458 samples, 9.94%)</title><rect x="30.7700%" y="149" width="9.9442%" height="15" fill="rgb(233,84,52)" fg:x="75123918" fg:w="24278458"/><text x="31.0200%" y="159.50">core::cmp::imp..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for char&gt;::le (24,278,458 samples, 9.94%)</title><rect x="30.7700%" y="133" width="9.9442%" height="15" fill="rgb(207,117,47)" fg:x="75123918" fg:w="24278458"/><text x="31.0200%" y="143.50">core::cmp::imp..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,250,029 samples, 2.97%)</title><rect x="56.6001%" y="229" width="2.9695%" height="15" fill="rgb(249,43,39)" fg:x="138187025" fg:w="7250029"/><text x="56.8501%" y="239.50">&lt;al..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (7,250,029 samples, 2.97%)</title><rect x="56.6001%" y="213" width="2.9695%" height="15" fill="rgb(209,38,44)" fg:x="138187025" fg:w="7250029"/><text x="56.8501%" y="223.50">&lt;co..</text></g><g><title>alloc::string::String::push (4,069,537 samples, 1.67%)</title><rect x="59.5696%" y="229" width="1.6668%" height="15" fill="rgb(236,212,23)" fg:x="145437054" fg:w="4069537"/><text x="59.8196%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,069,537 samples, 1.67%)</title><rect x="59.5696%" y="213" width="1.6668%" height="15" fill="rgb(242,79,21)" fg:x="145437054" fg:w="4069537"/><text x="59.8196%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8,748,065 samples, 3.58%)</title><rect x="61.2365%" y="229" width="3.5831%" height="15" fill="rgb(211,96,35)" fg:x="149506591" fg:w="8748065"/><text x="61.4865%" y="239.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8,748,065 samples, 3.58%)</title><rect x="61.2365%" y="213" width="3.5831%" height="15" fill="rgb(253,215,40)" fg:x="149506591" fg:w="8748065"/><text x="61.4865%" y="223.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8,748,065 samples, 3.58%)</title><rect x="61.2365%" y="197" width="3.5831%" height="15" fill="rgb(211,81,21)" fg:x="149506591" fg:w="8748065"/><text x="61.4865%" y="207.50">allo..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (8,748,065 samples, 3.58%)</title><rect x="61.2365%" y="181" width="3.5831%" height="15" fill="rgb(208,190,38)" fg:x="149506591" fg:w="8748065"/><text x="61.4865%" y="191.50">allo..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (8,748,065 samples, 3.58%)</title><rect x="61.2365%" y="165" width="3.5831%" height="15" fill="rgb(235,213,38)" fg:x="149506591" fg:w="8748065"/><text x="61.4865%" y="175.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8,748,065 samples, 3.58%)</title><rect x="61.2365%" y="149" width="3.5831%" height="15" fill="rgb(237,122,38)" fg:x="149506591" fg:w="8748065"/><text x="61.4865%" y="159.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (8,748,065 samples, 3.58%)</title><rect x="61.2365%" y="133" width="3.5831%" height="15" fill="rgb(244,218,35)" fg:x="149506591" fg:w="8748065"/><text x="61.4865%" y="143.50">allo..</text></g><g><title>alloc::alloc::alloc (8,748,065 samples, 3.58%)</title><rect x="61.2365%" y="117" width="3.5831%" height="15" fill="rgb(240,68,47)" fg:x="149506591" fg:w="8748065"/><text x="61.4865%" y="127.50">allo..</text></g><g><title>__rdl_alloc (8,748,065 samples, 3.58%)</title><rect x="61.2365%" y="101" width="3.5831%" height="15" fill="rgb(210,16,53)" fg:x="149506591" fg:w="8748065"/><text x="61.4865%" y="111.50">__rd..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8,748,065 samples, 3.58%)</title><rect x="61.2365%" y="85" width="3.5831%" height="15" fill="rgb(235,124,12)" fg:x="149506591" fg:w="8748065"/><text x="61.4865%" y="95.50">std:..</text></g><g><title>malloc (8,748,065 samples, 3.58%)</title><rect x="61.2365%" y="69" width="3.5831%" height="15" fill="rgb(224,169,11)" fg:x="149506591" fg:w="8748065"/><text x="61.4865%" y="79.50">mall..</text></g><g><title>[libc.so.6] (4,719,564 samples, 1.93%)</title><rect x="62.8865%" y="53" width="1.9331%" height="15" fill="rgb(250,166,2)" fg:x="153535092" fg:w="4719564"/><text x="63.1365%" y="63.50">[..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (20,834,057 samples, 8.53%)</title><rect x="64.8196%" y="229" width="8.5334%" height="15" fill="rgb(242,216,29)" fg:x="158254656" fg:w="20834057"/><text x="65.0696%" y="239.50">core::cmp::i..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;char&gt;&gt; (4,171,960 samples, 1.71%)</title><rect x="73.3530%" y="229" width="1.7088%" height="15" fill="rgb(230,116,27)" fg:x="179088713" fg:w="4171960"/><text x="73.6030%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,171,960 samples, 1.71%)</title><rect x="73.3530%" y="213" width="1.7088%" height="15" fill="rgb(228,99,48)" fg:x="179088713" fg:w="4171960"/><text x="73.6030%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;char,alloc::alloc::Global&gt;&gt; (4,171,960 samples, 1.71%)</title><rect x="73.3530%" y="197" width="1.7088%" height="15" fill="rgb(253,11,6)" fg:x="179088713" fg:w="4171960"/><text x="73.6030%" y="207.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,171,960 samples, 1.71%)</title><rect x="73.3530%" y="181" width="1.7088%" height="15" fill="rgb(247,143,39)" fg:x="179088713" fg:w="4171960"/><text x="73.6030%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;char&gt;&gt; (4,171,960 samples, 1.71%)</title><rect x="73.3530%" y="165" width="1.7088%" height="15" fill="rgb(236,97,10)" fg:x="179088713" fg:w="4171960"/><text x="73.6030%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,171,960 samples, 1.71%)</title><rect x="73.3530%" y="149" width="1.7088%" height="15" fill="rgb(233,208,19)" fg:x="179088713" fg:w="4171960"/><text x="73.6030%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,171,960 samples, 1.71%)</title><rect x="73.3530%" y="133" width="1.7088%" height="15" fill="rgb(216,164,2)" fg:x="179088713" fg:w="4171960"/><text x="73.6030%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,171,960 samples, 1.71%)</title><rect x="73.3530%" y="117" width="1.7088%" height="15" fill="rgb(220,129,5)" fg:x="179088713" fg:w="4171960"/><text x="73.6030%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (4,171,960 samples, 1.71%)</title><rect x="73.3530%" y="101" width="1.7088%" height="15" fill="rgb(242,17,10)" fg:x="179088713" fg:w="4171960"/><text x="73.6030%" y="111.50"></text></g><g><title>__rdl_dealloc (4,171,960 samples, 1.71%)</title><rect x="73.3530%" y="85" width="1.7088%" height="15" fill="rgb(242,107,0)" fg:x="179088713" fg:w="4171960"/><text x="73.6030%" y="95.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4,171,960 samples, 1.71%)</title><rect x="73.3530%" y="69" width="1.7088%" height="15" fill="rgb(251,28,31)" fg:x="179088713" fg:w="4171960"/><text x="73.6030%" y="79.50"></text></g><g><title>cfree (4,171,960 samples, 1.71%)</title><rect x="73.3530%" y="53" width="1.7088%" height="15" fill="rgb(233,223,10)" fg:x="179088713" fg:w="4171960"/><text x="73.6030%" y="63.50"></text></g><g><title>[libc.so.6] (4,171,960 samples, 1.71%)</title><rect x="73.3530%" y="37" width="1.7088%" height="15" fill="rgb(215,21,27)" fg:x="179088713" fg:w="4171960"/><text x="73.6030%" y="47.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable (4,037,246 samples, 1.65%)</title><rect x="75.0618%" y="229" width="1.6536%" height="15" fill="rgb(232,23,21)" fg:x="183260673" fg:w="4037246"/><text x="75.3118%" y="239.50"></text></g><g><title>core::slice::sort::unstable::sort (4,037,246 samples, 1.65%)</title><rect x="75.0618%" y="213" width="1.6536%" height="15" fill="rgb(244,5,23)" fg:x="183260673" fg:w="4037246"/><text x="75.3118%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (4,037,246 samples, 1.65%)</title><rect x="75.0618%" y="197" width="1.6536%" height="15" fill="rgb(226,81,46)" fg:x="183260673" fg:w="4037246"/><text x="75.3118%" y="207.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (4,037,246 samples, 1.65%)</title><rect x="75.0618%" y="181" width="1.6536%" height="15" fill="rgb(247,70,30)" fg:x="183260673" fg:w="4037246"/><text x="75.3118%" y="191.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (4,037,246 samples, 1.65%)</title><rect x="75.0618%" y="165" width="1.6536%" height="15" fill="rgb(212,68,19)" fg:x="183260673" fg:w="4037246"/><text x="75.3118%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (4,037,246 samples, 1.65%)</title><rect x="75.0618%" y="149" width="1.6536%" height="15" fill="rgb(240,187,13)" fg:x="183260673" fg:w="4037246"/><text x="75.3118%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (4,037,246 samples, 1.65%)</title><rect x="75.0618%" y="133" width="1.6536%" height="15" fill="rgb(223,113,26)" fg:x="183260673" fg:w="4037246"/><text x="75.3118%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (4,037,246 samples, 1.65%)</title><rect x="75.0618%" y="117" width="1.6536%" height="15" fill="rgb(206,192,2)" fg:x="183260673" fg:w="4037246"/><text x="75.3118%" y="127.50"></text></g><g><title>core::ops::function::FnMut::call_mut (4,037,246 samples, 1.65%)</title><rect x="75.0618%" y="101" width="1.6536%" height="15" fill="rgb(241,108,4)" fg:x="183260673" fg:w="4037246"/><text x="75.3118%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for char&gt;::lt (4,037,246 samples, 1.65%)</title><rect x="75.0618%" y="85" width="1.6536%" height="15" fill="rgb(247,173,49)" fg:x="183260673" fg:w="4037246"/><text x="75.3118%" y="95.50"></text></g><g><title>edna::punycode::adapt (24,378,707 samples, 9.99%)</title><rect x="76.7154%" y="229" width="9.9853%" height="15" fill="rgb(224,114,35)" fg:x="187297919" fg:w="24378707"/><text x="76.9654%" y="239.50">edna::punycode..</text></g><g><title>edna::punycode::clamped_sub (4,006,956 samples, 1.64%)</title><rect x="86.7007%" y="229" width="1.6412%" height="15" fill="rgb(245,159,27)" fg:x="211676626" fg:w="4006956"/><text x="86.9507%" y="239.50"></text></g><g><title>edna::punycode::encode (120,316,770 samples, 49.28%)</title><rect x="40.7143%" y="245" width="49.2806%" height="15" fill="rgb(245,172,44)" fg:x="99402376" fg:w="120316770"/><text x="40.9643%" y="255.50">edna::punycode::encode</text></g><g><title>edna::punycode::encode_digit (4,035,564 samples, 1.65%)</title><rect x="88.3419%" y="229" width="1.6529%" height="15" fill="rgb(236,23,11)" fg:x="215683582" fg:w="4035564"/><text x="88.5919%" y="239.50"></text></g><g><title>core::ops::function::Fn::call (12,305,394 samples, 5.04%)</title><rect x="89.9949%" y="213" width="5.0402%" height="15" fill="rgb(205,117,38)" fg:x="219719146" fg:w="12305394"/><text x="90.2449%" y="223.50">core::..</text></g><g><title>unicode_normalization::tables::qc_nfc (12,305,394 samples, 5.04%)</title><rect x="89.9949%" y="197" width="5.0402%" height="15" fill="rgb(237,72,25)" fg:x="219719146" fg:w="12305394"/><text x="90.2449%" y="207.50">unicod..</text></g><g><title>all (244,146,335 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="244146335"/><text x="0.2500%" y="367.50"></text></g><g><title>flamegraph-9b37 (244,146,335 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="244146335"/><text x="0.2500%" y="351.50">flamegraph-9b37</text></g><g><title>_start (242,131,261 samples, 99.17%)</title><rect x="0.8254%" y="325" width="99.1746%" height="15" fill="rgb(235,36,10)" fg:x="2015074" fg:w="242131261"/><text x="1.0754%" y="335.50">_start</text></g><g><title>__libc_start_main (242,131,261 samples, 99.17%)</title><rect x="0.8254%" y="309" width="99.1746%" height="15" fill="rgb(251,123,47)" fg:x="2015074" fg:w="242131261"/><text x="1.0754%" y="319.50">__libc_start_main</text></g><g><title>[libc.so.6] (242,131,261 samples, 99.17%)</title><rect x="0.8254%" y="293" width="99.1746%" height="15" fill="rgb(221,13,13)" fg:x="2015074" fg:w="242131261"/><text x="1.0754%" y="303.50">[libc.so.6]</text></g><g><title>main (242,131,261 samples, 99.17%)</title><rect x="0.8254%" y="277" width="99.1746%" height="15" fill="rgb(238,131,9)" fg:x="2015074" fg:w="242131261"/><text x="1.0754%" y="287.50">main</text></g><g><title>edna::to_ascii (229,919,664 samples, 94.17%)</title><rect x="5.8271%" y="261" width="94.1729%" height="15" fill="rgb(211,50,8)" fg:x="14226671" fg:w="229919664"/><text x="6.0771%" y="271.50">edna::to_ascii</text></g><g><title>unicode_normalization::quick_check::is_nfc_quick (24,427,189 samples, 10.01%)</title><rect x="89.9949%" y="245" width="10.0051%" height="15" fill="rgb(245,182,24)" fg:x="219719146" fg:w="24427189"/><text x="90.2449%" y="255.50">unicode_normal..</text></g><g><title>unicode_normalization::quick_check::quick_check (24,427,189 samples, 10.01%)</title><rect x="89.9949%" y="229" width="10.0051%" height="15" fill="rgb(242,14,37)" fg:x="219719146" fg:w="24427189"/><text x="90.2449%" y="239.50">unicode_normal..</text></g><g><title>unicode_normalization::lookups::canonical_combining_class (12,121,795 samples, 4.96%)</title><rect x="95.0350%" y="213" width="4.9650%" height="15" fill="rgb(246,228,12)" fg:x="232024540" fg:w="12121795"/><text x="95.2850%" y="223.50">unicod..</text></g><g><title>unicode_normalization::perfect_hash::mph_lookup (12,121,795 samples, 4.96%)</title><rect x="95.0350%" y="197" width="4.9650%" height="15" fill="rgb(213,55,15)" fg:x="232024540" fg:w="12121795"/><text x="95.2850%" y="207.50">unicod..</text></g><g><title>unicode_normalization::perfect_hash::my_hash (8,112,508 samples, 3.32%)</title><rect x="96.6772%" y="181" width="3.3228%" height="15" fill="rgb(209,9,3)" fg:x="236033827" fg:w="8112508"/><text x="96.9272%" y="191.50">uni..</text></g></svg></svg>