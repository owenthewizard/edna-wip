<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="311132123"><g><title>[ld-linux-x86-64.so.2] (2,532,299 samples, 0.81%)</title><rect x="0.0000%" y="469" width="0.8139%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2532299"/><text x="0.2500%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,445,041 samples, 0.79%)</title><rect x="0.0280%" y="453" width="0.7859%" height="15" fill="rgb(217,0,24)" fg:x="87258" fg:w="2445041"/><text x="0.2780%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,445,041 samples, 0.79%)</title><rect x="0.0280%" y="437" width="0.7859%" height="15" fill="rgb(221,193,54)" fg:x="87258" fg:w="2445041"/><text x="0.2780%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,445,041 samples, 0.79%)</title><rect x="0.0280%" y="421" width="0.7859%" height="15" fill="rgb(248,212,6)" fg:x="87258" fg:w="2445041"/><text x="0.2780%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,445,041 samples, 0.79%)</title><rect x="0.0280%" y="405" width="0.7859%" height="15" fill="rgb(208,68,35)" fg:x="87258" fg:w="2445041"/><text x="0.2780%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,445,041 samples, 0.79%)</title><rect x="0.0280%" y="389" width="0.7859%" height="15" fill="rgb(232,128,0)" fg:x="87258" fg:w="2445041"/><text x="0.2780%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,445,041 samples, 0.79%)</title><rect x="0.0280%" y="373" width="0.7859%" height="15" fill="rgb(207,160,47)" fg:x="87258" fg:w="2445041"/><text x="0.2780%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,445,041 samples, 0.79%)</title><rect x="0.0280%" y="357" width="0.7859%" height="15" fill="rgb(228,23,34)" fg:x="87258" fg:w="2445041"/><text x="0.2780%" y="367.50"></text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (9,223,539 samples, 2.96%)</title><rect x="0.8139%" y="405" width="2.9645%" height="15" fill="rgb(218,30,26)" fg:x="2532299" fg:w="9223539"/><text x="1.0639%" y="415.50">&lt;[T..</text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (9,223,539 samples, 2.96%)</title><rect x="0.8139%" y="389" width="2.9645%" height="15" fill="rgb(220,122,19)" fg:x="2532299" fg:w="9223539"/><text x="1.0639%" y="399.50">cor..</text></g><g><title>core::ptr::swap (9,223,539 samples, 2.96%)</title><rect x="0.8139%" y="373" width="2.9645%" height="15" fill="rgb(250,228,42)" fg:x="2532299" fg:w="9223539"/><text x="1.0639%" y="383.50">cor..</text></g><g><title>core::intrinsics::copy (9,223,539 samples, 2.96%)</title><rect x="0.8139%" y="357" width="2.9645%" height="15" fill="rgb(240,193,28)" fg:x="2532299" fg:w="9223539"/><text x="1.0639%" y="367.50">cor..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3,994,252 samples, 1.28%)</title><rect x="6.6394%" y="341" width="1.2838%" height="15" fill="rgb(216,20,37)" fg:x="20657166" fg:w="3994252"/><text x="6.8894%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (3,994,252 samples, 1.28%)</title><rect x="6.6394%" y="325" width="1.2838%" height="15" fill="rgb(206,188,39)" fg:x="20657166" fg:w="3994252"/><text x="6.8894%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (3,994,252 samples, 1.28%)</title><rect x="6.6394%" y="309" width="1.2838%" height="15" fill="rgb(217,207,13)" fg:x="20657166" fg:w="3994252"/><text x="6.8894%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (3,994,252 samples, 1.28%)</title><rect x="6.6394%" y="293" width="1.2838%" height="15" fill="rgb(231,73,38)" fg:x="20657166" fg:w="3994252"/><text x="6.8894%" y="303.50"></text></g><g><title>core::slice::memchr::memchr_naive (3,994,252 samples, 1.28%)</title><rect x="6.6394%" y="277" width="1.2838%" height="15" fill="rgb(225,20,46)" fg:x="20657166" fg:w="3994252"/><text x="6.8894%" y="287.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,101,552 samples, 2.60%)</title><rect x="6.6394%" y="373" width="2.6039%" height="15" fill="rgb(210,31,41)" fg:x="20657166" fg:w="8101552"/><text x="6.8894%" y="383.50">&lt;c..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (8,101,552 samples, 2.60%)</title><rect x="6.6394%" y="357" width="2.6039%" height="15" fill="rgb(221,200,47)" fg:x="20657166" fg:w="8101552"/><text x="6.8894%" y="367.50">co..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (4,107,300 samples, 1.32%)</title><rect x="7.9231%" y="341" width="1.3201%" height="15" fill="rgb(226,26,5)" fg:x="24651418" fg:w="4107300"/><text x="8.1731%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17,116,746 samples, 5.50%)</title><rect x="6.6394%" y="389" width="5.5014%" height="15" fill="rgb(249,33,26)" fg:x="20657166" fg:w="17116746"/><text x="6.8894%" y="399.50">&lt;core::..</text></g><g><title>core::option::Option&lt;T&gt;::map (9,015,194 samples, 2.90%)</title><rect x="9.2432%" y="373" width="2.8975%" height="15" fill="rgb(235,183,28)" fg:x="28758718" fg:w="9015194"/><text x="9.4932%" y="383.50">co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9,015,194 samples, 2.90%)</title><rect x="9.2432%" y="357" width="2.8975%" height="15" fill="rgb(221,5,38)" fg:x="28758718" fg:w="9015194"/><text x="9.4932%" y="367.50">co..</text></g><g><title>edna::to_ascii::_{{closure}} (9,015,194 samples, 2.90%)</title><rect x="9.2432%" y="341" width="2.8975%" height="15" fill="rgb(247,18,42)" fg:x="28758718" fg:w="9015194"/><text x="9.4932%" y="351.50">ed..</text></g><g><title>core::str::&lt;impl str&gt;::split_once (9,015,194 samples, 2.90%)</title><rect x="9.2432%" y="325" width="2.8975%" height="15" fill="rgb(241,131,45)" fg:x="28758718" fg:w="9015194"/><text x="9.4932%" y="335.50">co..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (9,015,194 samples, 2.90%)</title><rect x="9.2432%" y="309" width="2.8975%" height="15" fill="rgb(249,31,29)" fg:x="28758718" fg:w="9015194"/><text x="9.4932%" y="319.50">&lt;c..</text></g><g><title>core::slice::memchr::memchr (4,068,456 samples, 1.31%)</title><rect x="10.8332%" y="293" width="1.3076%" height="15" fill="rgb(225,111,53)" fg:x="33705456" fg:w="4068456"/><text x="11.0832%" y="303.50"></text></g><g><title>core::slice::memchr::memchr_aligned (4,068,456 samples, 1.31%)</title><rect x="10.8332%" y="277" width="1.3076%" height="15" fill="rgb(238,160,17)" fg:x="33705456" fg:w="4068456"/><text x="11.0832%" y="287.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (4,068,456 samples, 1.31%)</title><rect x="10.8332%" y="261" width="1.3076%" height="15" fill="rgb(214,148,48)" fg:x="33705456" fg:w="4068456"/><text x="11.0832%" y="271.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (4,068,456 samples, 1.31%)</title><rect x="10.8332%" y="245" width="1.3076%" height="15" fill="rgb(232,36,49)" fg:x="33705456" fg:w="4068456"/><text x="11.0832%" y="255.50"></text></g><g><title>alloc::string::String::push (4,078,100 samples, 1.31%)</title><rect x="12.1408%" y="389" width="1.3107%" height="15" fill="rgb(209,103,24)" fg:x="37773912" fg:w="4078100"/><text x="12.3908%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,078,100 samples, 1.31%)</title><rect x="12.1408%" y="373" width="1.3107%" height="15" fill="rgb(229,88,8)" fg:x="37773912" fg:w="4078100"/><text x="12.3908%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4,078,100 samples, 1.31%)</title><rect x="12.1408%" y="357" width="1.3107%" height="15" fill="rgb(213,181,19)" fg:x="37773912" fg:w="4078100"/><text x="12.3908%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (4,078,100 samples, 1.31%)</title><rect x="12.1408%" y="341" width="1.3107%" height="15" fill="rgb(254,191,54)" fg:x="37773912" fg:w="4078100"/><text x="12.3908%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4,078,100 samples, 1.31%)</title><rect x="12.1408%" y="325" width="1.3107%" height="15" fill="rgb(241,83,37)" fg:x="37773912" fg:w="4078100"/><text x="12.3908%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,078,100 samples, 1.31%)</title><rect x="12.1408%" y="309" width="1.3107%" height="15" fill="rgb(233,36,39)" fg:x="37773912" fg:w="4078100"/><text x="12.3908%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4,078,100 samples, 1.31%)</title><rect x="12.1408%" y="293" width="1.3107%" height="15" fill="rgb(226,3,54)" fg:x="37773912" fg:w="4078100"/><text x="12.3908%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4,078,100 samples, 1.31%)</title><rect x="12.1408%" y="277" width="1.3107%" height="15" fill="rgb(245,192,40)" fg:x="37773912" fg:w="4078100"/><text x="12.3908%" y="287.50"></text></g><g><title>alloc::alloc::realloc (4,078,100 samples, 1.31%)</title><rect x="12.1408%" y="261" width="1.3107%" height="15" fill="rgb(238,167,29)" fg:x="37773912" fg:w="4078100"/><text x="12.3908%" y="271.50"></text></g><g><title>__rust_realloc (4,078,100 samples, 1.31%)</title><rect x="12.1408%" y="245" width="1.3107%" height="15" fill="rgb(232,182,51)" fg:x="37773912" fg:w="4078100"/><text x="12.3908%" y="255.50"></text></g><g><title>core::alloc::global::GlobalAlloc::realloc (4,078,100 samples, 1.31%)</title><rect x="12.1408%" y="229" width="1.3107%" height="15" fill="rgb(231,60,39)" fg:x="37773912" fg:w="4078100"/><text x="12.3908%" y="239.50"></text></g><g><title>&lt;rpmalloc::RpMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (4,078,100 samples, 1.31%)</title><rect x="12.1408%" y="213" width="1.3107%" height="15" fill="rgb(208,69,12)" fg:x="37773912" fg:w="4078100"/><text x="12.3908%" y="223.50"></text></g><g><title>_rpmalloc_aligned_allocate (4,078,100 samples, 1.31%)</title><rect x="12.1408%" y="197" width="1.3107%" height="15" fill="rgb(235,93,37)" fg:x="37773912" fg:w="4078100"/><text x="12.3908%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,936,525 samples, 1.27%)</title><rect x="14.7474%" y="229" width="1.2652%" height="15" fill="rgb(213,116,39)" fg:x="45883967" fg:w="3936525"/><text x="14.9974%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,936,525 samples, 1.27%)</title><rect x="14.7474%" y="213" width="1.2652%" height="15" fill="rgb(222,207,29)" fg:x="45883967" fg:w="3936525"/><text x="14.9974%" y="223.50"></text></g><g><title>alloc::alloc::realloc (3,936,525 samples, 1.27%)</title><rect x="14.7474%" y="197" width="1.2652%" height="15" fill="rgb(206,96,30)" fg:x="45883967" fg:w="3936525"/><text x="14.9974%" y="207.50"></text></g><g><title>__rust_realloc (3,936,525 samples, 1.27%)</title><rect x="14.7474%" y="181" width="1.2652%" height="15" fill="rgb(218,138,4)" fg:x="45883967" fg:w="3936525"/><text x="14.9974%" y="191.50"></text></g><g><title>core::alloc::global::GlobalAlloc::realloc (3,936,525 samples, 1.27%)</title><rect x="14.7474%" y="165" width="1.2652%" height="15" fill="rgb(250,191,14)" fg:x="45883967" fg:w="3936525"/><text x="14.9974%" y="175.50"></text></g><g><title>&lt;rpmalloc::RpMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3,936,525 samples, 1.27%)</title><rect x="14.7474%" y="149" width="1.2652%" height="15" fill="rgb(239,60,40)" fg:x="45883967" fg:w="3936525"/><text x="14.9974%" y="159.50"></text></g><g><title>_rpmalloc_aligned_allocate (3,936,525 samples, 1.27%)</title><rect x="14.7474%" y="133" width="1.2652%" height="15" fill="rgb(206,27,48)" fg:x="45883967" fg:w="3936525"/><text x="14.9974%" y="143.50"></text></g><g><title>alloc::string::String::push_str (11,954,656 samples, 3.84%)</title><rect x="13.4515%" y="389" width="3.8423%" height="15" fill="rgb(225,35,8)" fg:x="41852012" fg:w="11954656"/><text x="13.7015%" y="399.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11,954,656 samples, 3.84%)</title><rect x="13.4515%" y="373" width="3.8423%" height="15" fill="rgb(250,213,24)" fg:x="41852012" fg:w="11954656"/><text x="13.7015%" y="383.50">allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11,954,656 samples, 3.84%)</title><rect x="13.4515%" y="357" width="3.8423%" height="15" fill="rgb(247,123,22)" fg:x="41852012" fg:w="11954656"/><text x="13.7015%" y="367.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11,954,656 samples, 3.84%)</title><rect x="13.4515%" y="341" width="3.8423%" height="15" fill="rgb(231,138,38)" fg:x="41852012" fg:w="11954656"/><text x="13.7015%" y="351.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7,922,701 samples, 2.55%)</title><rect x="14.7474%" y="325" width="2.5464%" height="15" fill="rgb(231,145,46)" fg:x="45883967" fg:w="7922701"/><text x="14.9974%" y="335.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7,922,701 samples, 2.55%)</title><rect x="14.7474%" y="309" width="2.5464%" height="15" fill="rgb(251,118,11)" fg:x="45883967" fg:w="7922701"/><text x="14.9974%" y="319.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (7,922,701 samples, 2.55%)</title><rect x="14.7474%" y="293" width="2.5464%" height="15" fill="rgb(217,147,25)" fg:x="45883967" fg:w="7922701"/><text x="14.9974%" y="303.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (7,922,701 samples, 2.55%)</title><rect x="14.7474%" y="277" width="2.5464%" height="15" fill="rgb(247,81,37)" fg:x="45883967" fg:w="7922701"/><text x="14.9974%" y="287.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (7,922,701 samples, 2.55%)</title><rect x="14.7474%" y="261" width="2.5464%" height="15" fill="rgb(209,12,38)" fg:x="45883967" fg:w="7922701"/><text x="14.9974%" y="271.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (7,922,701 samples, 2.55%)</title><rect x="14.7474%" y="245" width="2.5464%" height="15" fill="rgb(227,1,9)" fg:x="45883967" fg:w="7922701"/><text x="14.9974%" y="255.50">al..</text></g><g><title>rpaligned_alloc (3,986,176 samples, 1.28%)</title><rect x="16.0126%" y="229" width="1.2812%" height="15" fill="rgb(248,47,43)" fg:x="49820492" fg:w="3986176"/><text x="16.2626%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_ascii (6,355,090 samples, 2.04%)</title><rect x="17.2938%" y="389" width="2.0426%" height="15" fill="rgb(221,10,30)" fg:x="53806668" fg:w="6355090"/><text x="17.5438%" y="399.50">c..</text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (6,355,090 samples, 2.04%)</title><rect x="17.2938%" y="373" width="2.0426%" height="15" fill="rgb(210,229,1)" fg:x="53806668" fg:w="6355090"/><text x="17.5438%" y="383.50">c..</text></g><g><title>core::slice::ascii::is_ascii (6,355,090 samples, 2.04%)</title><rect x="17.2938%" y="357" width="2.0426%" height="15" fill="rgb(222,148,37)" fg:x="53806668" fg:w="6355090"/><text x="17.5438%" y="367.50">c..</text></g><g><title>core::slice::ascii::is_ascii::runtime (6,355,090 samples, 2.04%)</title><rect x="17.2938%" y="341" width="2.0426%" height="15" fill="rgb(234,67,33)" fg:x="53806668" fg:w="6355090"/><text x="17.5438%" y="351.50">c..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_unchecked (8,309,117 samples, 2.67%)</title><rect x="19.3364%" y="373" width="2.6706%" height="15" fill="rgb(247,98,35)" fg:x="60161758" fg:w="8309117"/><text x="19.5864%" y="383.50">co..</text></g><g><title>alloc::string::String::push (4,299,162 samples, 1.38%)</title><rect x="22.0070%" y="357" width="1.3818%" height="15" fill="rgb(247,138,52)" fg:x="68470875" fg:w="4299162"/><text x="22.2570%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,299,162 samples, 1.38%)</title><rect x="22.0070%" y="341" width="1.3818%" height="15" fill="rgb(213,79,30)" fg:x="68470875" fg:w="4299162"/><text x="22.2570%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4,299,162 samples, 1.38%)</title><rect x="22.0070%" y="325" width="1.3818%" height="15" fill="rgb(246,177,23)" fg:x="68470875" fg:w="4299162"/><text x="22.2570%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (4,299,162 samples, 1.38%)</title><rect x="22.0070%" y="309" width="1.3818%" height="15" fill="rgb(230,62,27)" fg:x="68470875" fg:w="4299162"/><text x="22.2570%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4,299,162 samples, 1.38%)</title><rect x="22.0070%" y="293" width="1.3818%" height="15" fill="rgb(216,154,8)" fg:x="68470875" fg:w="4299162"/><text x="22.2570%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,299,162 samples, 1.38%)</title><rect x="22.0070%" y="277" width="1.3818%" height="15" fill="rgb(244,35,45)" fg:x="68470875" fg:w="4299162"/><text x="22.2570%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4,299,162 samples, 1.38%)</title><rect x="22.0070%" y="261" width="1.3818%" height="15" fill="rgb(251,115,12)" fg:x="68470875" fg:w="4299162"/><text x="22.2570%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4,299,162 samples, 1.38%)</title><rect x="22.0070%" y="245" width="1.3818%" height="15" fill="rgb(240,54,50)" fg:x="68470875" fg:w="4299162"/><text x="22.2570%" y="255.50"></text></g><g><title>alloc::alloc::realloc (4,299,162 samples, 1.38%)</title><rect x="22.0070%" y="229" width="1.3818%" height="15" fill="rgb(233,84,52)" fg:x="68470875" fg:w="4299162"/><text x="22.2570%" y="239.50"></text></g><g><title>__rust_realloc (4,299,162 samples, 1.38%)</title><rect x="22.0070%" y="213" width="1.3818%" height="15" fill="rgb(207,117,47)" fg:x="68470875" fg:w="4299162"/><text x="22.2570%" y="223.50"></text></g><g><title>core::alloc::global::GlobalAlloc::realloc (4,299,162 samples, 1.38%)</title><rect x="22.0070%" y="197" width="1.3818%" height="15" fill="rgb(249,43,39)" fg:x="68470875" fg:w="4299162"/><text x="22.2570%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,299,162 samples, 1.38%)</title><rect x="22.0070%" y="181" width="1.3818%" height="15" fill="rgb(209,38,44)" fg:x="68470875" fg:w="4299162"/><text x="22.2570%" y="191.50"></text></g><g><title>[libc.so.6] (4,299,162 samples, 1.38%)</title><rect x="22.0070%" y="165" width="1.3818%" height="15" fill="rgb(236,212,23)" fg:x="68470875" fg:w="4299162"/><text x="22.2570%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (4,005,203 samples, 1.29%)</title><rect x="23.3888%" y="325" width="1.2873%" height="15" fill="rgb(242,79,21)" fg:x="72770037" fg:w="4005203"/><text x="23.6388%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (4,005,203 samples, 1.29%)</title><rect x="23.3888%" y="309" width="1.2873%" height="15" fill="rgb(211,96,35)" fg:x="72770037" fg:w="4005203"/><text x="23.6388%" y="319.50"></text></g><g><title>core::slice::index::get_noubcheck (4,005,203 samples, 1.29%)</title><rect x="23.3888%" y="293" width="1.2873%" height="15" fill="rgb(253,215,40)" fg:x="72770037" fg:w="4005203"/><text x="23.6388%" y="303.50"></text></g><g><title>edna::map_internal (37,526,302 samples, 12.06%)</title><rect x="22.0070%" y="373" width="12.0612%" height="15" fill="rgb(211,81,21)" fg:x="68470875" fg:w="37526302"/><text x="22.2570%" y="383.50">edna::map_internal</text></g><g><title>edna::mapping::Mapping::of (33,227,140 samples, 10.68%)</title><rect x="23.3888%" y="357" width="10.6794%" height="15" fill="rgb(208,190,38)" fg:x="72770037" fg:w="33227140"/><text x="23.6388%" y="367.50">edna::mapping::M..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (33,227,140 samples, 10.68%)</title><rect x="23.3888%" y="341" width="10.6794%" height="15" fill="rgb(235,213,38)" fg:x="72770037" fg:w="33227140"/><text x="23.6388%" y="351.50">core::slice::&lt;im..</text></g><g><title>edna::mapping::Mapping::of::_{{closure}} (29,221,937 samples, 9.39%)</title><rect x="24.6761%" y="325" width="9.3921%" height="15" fill="rgb(237,122,38)" fg:x="76775240" fg:w="29221937"/><text x="24.9261%" y="335.50">edna::mapping..</text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (29,221,937 samples, 9.39%)</title><rect x="24.6761%" y="309" width="9.3921%" height="15" fill="rgb(244,218,35)" fg:x="76775240" fg:w="29221937"/><text x="24.9261%" y="319.50">core::ops::ra..</text></g><g><title>core::ops::range::RangeBounds::contains (29,221,937 samples, 9.39%)</title><rect x="24.6761%" y="293" width="9.3921%" height="15" fill="rgb(240,68,47)" fg:x="76775240" fg:w="29221937"/><text x="24.9261%" y="303.50">core::ops::ra..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (21,550,595 samples, 6.93%)</title><rect x="27.1417%" y="277" width="6.9265%" height="15" fill="rgb(210,16,53)" fg:x="84446582" fg:w="21550595"/><text x="27.3917%" y="287.50">core::cmp..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for char&gt;::le (21,550,595 samples, 6.93%)</title><rect x="27.1417%" y="261" width="6.9265%" height="15" fill="rgb(235,124,12)" fg:x="84446582" fg:w="21550595"/><text x="27.3917%" y="271.50">core::cmp..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (3,873,274 samples, 1.24%)</title><rect x="35.5577%" y="341" width="1.2449%" height="15" fill="rgb(224,169,11)" fg:x="110631554" fg:w="3873274"/><text x="35.8077%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3,873,274 samples, 1.24%)</title><rect x="35.5577%" y="325" width="1.2449%" height="15" fill="rgb(250,166,2)" fg:x="110631554" fg:w="3873274"/><text x="35.8077%" y="335.50"></text></g><g><title>core::slice::index::get_noubcheck (3,873,274 samples, 1.24%)</title><rect x="35.5577%" y="309" width="1.2449%" height="15" fill="rgb(242,216,29)" fg:x="110631554" fg:w="3873274"/><text x="35.8077%" y="319.50"></text></g><g><title>edna::map_validate (93,286,115 samples, 29.98%)</title><rect x="19.3364%" y="389" width="29.9828%" height="15" fill="rgb(230,116,27)" fg:x="60161758" fg:w="93286115"/><text x="19.5864%" y="399.50">edna::map_validate</text></g><g><title>edna::mapping::Mapping::of (47,450,696 samples, 15.25%)</title><rect x="34.0682%" y="373" width="15.2510%" height="15" fill="rgb(228,99,48)" fg:x="105997177" fg:w="47450696"/><text x="34.3182%" y="383.50">edna::mapping::Mapping:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (47,450,696 samples, 15.25%)</title><rect x="34.0682%" y="357" width="15.2510%" height="15" fill="rgb(253,11,6)" fg:x="105997177" fg:w="47450696"/><text x="34.3182%" y="367.50">core::slice::&lt;impl [T]&gt;..</text></g><g><title>edna::mapping::Mapping::of::_{{closure}} (38,943,045 samples, 12.52%)</title><rect x="36.8026%" y="341" width="12.5166%" height="15" fill="rgb(247,143,39)" fg:x="114504828" fg:w="38943045"/><text x="37.0526%" y="351.50">edna::mapping::Mapp..</text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (38,943,045 samples, 12.52%)</title><rect x="36.8026%" y="325" width="12.5166%" height="15" fill="rgb(236,97,10)" fg:x="114504828" fg:w="38943045"/><text x="37.0526%" y="335.50">core::ops::range::R..</text></g><g><title>core::ops::range::RangeBounds::contains (38,943,045 samples, 12.52%)</title><rect x="36.8026%" y="309" width="12.5166%" height="15" fill="rgb(233,208,19)" fg:x="114504828" fg:w="38943045"/><text x="37.0526%" y="319.50">core::ops::range::R..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (24,074,940 samples, 7.74%)</title><rect x="41.5813%" y="293" width="7.7379%" height="15" fill="rgb(216,164,2)" fg:x="129372933" fg:w="24074940"/><text x="41.8313%" y="303.50">core::cmp::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for char&gt;::le (24,074,940 samples, 7.74%)</title><rect x="41.5813%" y="277" width="7.7379%" height="15" fill="rgb(220,129,5)" fg:x="129372933" fg:w="24074940"/><text x="41.8313%" y="287.50">core::cmp::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4,137,437 samples, 1.33%)</title><rect x="63.7893%" y="341" width="1.3298%" height="15" fill="rgb(242,17,10)" fg:x="198468878" fg:w="4137437"/><text x="64.0393%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (4,137,437 samples, 1.33%)</title><rect x="63.7893%" y="325" width="1.3298%" height="15" fill="rgb(242,107,0)" fg:x="198468878" fg:w="4137437"/><text x="64.0393%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4,137,437 samples, 1.33%)</title><rect x="63.7893%" y="309" width="1.3298%" height="15" fill="rgb(251,28,31)" fg:x="198468878" fg:w="4137437"/><text x="64.0393%" y="319.50"></text></g><g><title>alloc::string::String::push (12,308,591 samples, 3.96%)</title><rect x="62.4840%" y="373" width="3.9561%" height="15" fill="rgb(233,223,10)" fg:x="194407841" fg:w="12308591"/><text x="62.7340%" y="383.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12,308,591 samples, 3.96%)</title><rect x="62.4840%" y="357" width="3.9561%" height="15" fill="rgb(215,21,27)" fg:x="194407841" fg:w="12308591"/><text x="62.7340%" y="367.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4,110,117 samples, 1.32%)</title><rect x="65.1191%" y="341" width="1.3210%" height="15" fill="rgb(232,23,21)" fg:x="202606315" fg:w="4110117"/><text x="65.3691%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4,110,117 samples, 1.32%)</title><rect x="65.1191%" y="325" width="1.3210%" height="15" fill="rgb(244,5,23)" fg:x="202606315" fg:w="4110117"/><text x="65.3691%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (4,110,117 samples, 1.32%)</title><rect x="65.1191%" y="309" width="1.3210%" height="15" fill="rgb(226,81,46)" fg:x="202606315" fg:w="4110117"/><text x="65.3691%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (4,110,117 samples, 1.32%)</title><rect x="65.1191%" y="293" width="1.3210%" height="15" fill="rgb(247,70,30)" fg:x="202606315" fg:w="4110117"/><text x="65.3691%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (15,991,928 samples, 5.14%)</title><rect x="66.4401%" y="373" width="5.1399%" height="15" fill="rgb(212,68,19)" fg:x="206716432" fg:w="15991928"/><text x="66.6901%" y="383.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="373" width="1.2412%" height="15" fill="rgb(240,187,13)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="357" width="1.2412%" height="15" fill="rgb(223,113,26)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="341" width="1.2412%" height="15" fill="rgb(206,192,2)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="325" width="1.2412%" height="15" fill="rgb(241,108,4)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="309" width="1.2412%" height="15" fill="rgb(247,173,49)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="293" width="1.2412%" height="15" fill="rgb(224,114,35)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="277" width="1.2412%" height="15" fill="rgb(245,159,27)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="261" width="1.2412%" height="15" fill="rgb(245,172,44)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="245" width="1.2412%" height="15" fill="rgb(236,23,11)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="229" width="1.2412%" height="15" fill="rgb(205,117,38)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="213" width="1.2412%" height="15" fill="rgb(237,72,25)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="197" width="1.2412%" height="15" fill="rgb(244,70,9)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="181" width="1.2412%" height="15" fill="rgb(217,125,39)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="165" width="1.2412%" height="15" fill="rgb(235,36,10)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="175.50"></text></g><g><title>alloc::alloc::realloc (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="149" width="1.2412%" height="15" fill="rgb(251,123,47)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="159.50"></text></g><g><title>__rust_realloc (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="133" width="1.2412%" height="15" fill="rgb(221,13,13)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="143.50"></text></g><g><title>core::alloc::global::GlobalAlloc::realloc (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="117" width="1.2412%" height="15" fill="rgb(238,131,9)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="127.50"></text></g><g><title>&lt;rpmalloc::RpMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="101" width="1.2412%" height="15" fill="rgb(211,50,8)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="111.50"></text></g><g><title>_rpmalloc_allocate_from_heap_fallback (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="85" width="1.2412%" height="15" fill="rgb(245,182,24)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="95.50"></text></g><g><title>_rpmalloc_span_initialize_new (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="69" width="1.2412%" height="15" fill="rgb(242,14,37)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="79.50"></text></g><g><title>free_list_partial_init (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="53" width="1.2412%" height="15" fill="rgb(246,228,12)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="63.50"></text></g><g><title>free_list_partial_init (3,861,891 samples, 1.24%)</title><rect x="71.5800%" y="37" width="1.2412%" height="15" fill="rgb(213,55,15)" fg:x="222708360" fg:w="3861891"/><text x="71.8300%" y="47.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (13,924,119 samples, 4.48%)</title><rect x="76.7095%" y="293" width="4.4753%" height="15" fill="rgb(209,9,3)" fg:x="238667922" fg:w="13924119"/><text x="76.9595%" y="303.50">core:..</text></g><g><title>edna::punycode::encode::_{{closure}} (4,182,885 samples, 1.34%)</title><rect x="79.8404%" y="277" width="1.3444%" height="15" fill="rgb(230,59,30)" fg:x="248409156" fg:w="4182885"/><text x="80.0904%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (29,976,765 samples, 9.63%)</title><rect x="72.8212%" y="373" width="9.6347%" height="15" fill="rgb(209,121,21)" fg:x="226570251" fg:w="29976765"/><text x="73.0712%" y="383.50">core::iter::tr..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (29,976,765 samples, 9.63%)</title><rect x="72.8212%" y="357" width="9.6347%" height="15" fill="rgb(220,109,13)" fg:x="226570251" fg:w="29976765"/><text x="73.0712%" y="367.50">core::iter::tr..</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (29,976,765 samples, 9.63%)</title><rect x="72.8212%" y="341" width="9.6347%" height="15" fill="rgb(232,18,1)" fg:x="226570251" fg:w="29976765"/><text x="73.0712%" y="351.50">core::iter::tr..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (29,976,765 samples, 9.63%)</title><rect x="72.8212%" y="325" width="9.6347%" height="15" fill="rgb(215,41,42)" fg:x="226570251" fg:w="29976765"/><text x="73.0712%" y="335.50">&lt;core::iter::a..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (29,976,765 samples, 9.63%)</title><rect x="72.8212%" y="309" width="9.6347%" height="15" fill="rgb(224,123,36)" fg:x="226570251" fg:w="29976765"/><text x="73.0712%" y="319.50">&lt;core::slice::..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (3,954,975 samples, 1.27%)</title><rect x="81.1848%" y="293" width="1.2712%" height="15" fill="rgb(240,125,3)" fg:x="252592041" fg:w="3954975"/><text x="81.4348%" y="303.50"></text></g><g><title>edna::punycode::encode (128,466,621 samples, 41.29%)</title><rect x="49.3192%" y="389" width="41.2901%" height="15" fill="rgb(205,98,50)" fg:x="153447873" fg:w="128466621"/><text x="49.5692%" y="399.50">edna::punycode::encode</text></g><g><title>edna::punycode::adapt (25,367,478 samples, 8.15%)</title><rect x="82.4560%" y="373" width="8.1533%" height="15" fill="rgb(205,185,37)" fg:x="256547016" fg:w="25367478"/><text x="82.7060%" y="383.50">edna::punyc..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4,072,120 samples, 1.31%)</title><rect x="91.8902%" y="357" width="1.3088%" height="15" fill="rgb(238,207,15)" fg:x="285900018" fg:w="4072120"/><text x="92.1402%" y="367.50"></text></g><g><title>core::str::validations::next_code_point (4,072,120 samples, 1.31%)</title><rect x="91.8902%" y="341" width="1.3088%" height="15" fill="rgb(213,199,42)" fg:x="285900018" fg:w="4072120"/><text x="92.1402%" y="351.50"></text></g><g><title>core::ops::function::Fn::call (11,959,796 samples, 3.84%)</title><rect x="93.1990%" y="357" width="3.8440%" height="15" fill="rgb(235,201,11)" fg:x="289972138" fg:w="11959796"/><text x="93.4490%" y="367.50">core..</text></g><g><title>unicode_normalization::tables::qc_nfc (11,959,796 samples, 3.84%)</title><rect x="93.1990%" y="341" width="3.8440%" height="15" fill="rgb(207,46,11)" fg:x="289972138" fg:w="11959796"/><text x="93.4490%" y="351.50">unic..</text></g><g><title>all (311,132,123 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="311132123"/><text x="0.2500%" y="511.50"></text></g><g><title>flamegraph-b483 (311,132,123 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="311132123"/><text x="0.2500%" y="495.50">flamegraph-b483</text></g><g><title>_start (308,599,824 samples, 99.19%)</title><rect x="0.8139%" y="469" width="99.1861%" height="15" fill="rgb(247,202,23)" fg:x="2532299" fg:w="308599824"/><text x="1.0639%" y="479.50">_start</text></g><g><title>__libc_start_main (308,599,824 samples, 99.19%)</title><rect x="0.8139%" y="453" width="99.1861%" height="15" fill="rgb(219,102,11)" fg:x="2532299" fg:w="308599824"/><text x="1.0639%" y="463.50">__libc_start_main</text></g><g><title>[libc.so.6] (308,599,824 samples, 99.19%)</title><rect x="0.8139%" y="437" width="99.1861%" height="15" fill="rgb(243,110,44)" fg:x="2532299" fg:w="308599824"/><text x="1.0639%" y="447.50">[libc.so.6]</text></g><g><title>main (308,599,824 samples, 99.19%)</title><rect x="0.8139%" y="421" width="99.1861%" height="15" fill="rgb(222,74,54)" fg:x="2532299" fg:w="308599824"/><text x="1.0639%" y="431.50">main</text></g><g><title>edna::to_ascii (299,376,285 samples, 96.22%)</title><rect x="3.7784%" y="405" width="96.2216%" height="15" fill="rgb(216,99,12)" fg:x="11755838" fg:w="299376285"/><text x="4.0284%" y="415.50">edna::to_ascii</text></g><g><title>unicode_normalization::quick_check::is_nfc_quick (29,217,629 samples, 9.39%)</title><rect x="90.6093%" y="389" width="9.3907%" height="15" fill="rgb(226,22,26)" fg:x="281914494" fg:w="29217629"/><text x="90.8593%" y="399.50">unicode_norma..</text></g><g><title>unicode_normalization::quick_check::quick_check (29,217,629 samples, 9.39%)</title><rect x="90.6093%" y="373" width="9.3907%" height="15" fill="rgb(217,163,10)" fg:x="281914494" fg:w="29217629"/><text x="90.8593%" y="383.50">unicode_norma..</text></g><g><title>unicode_normalization::lookups::canonical_combining_class (9,200,189 samples, 2.96%)</title><rect x="97.0430%" y="357" width="2.9570%" height="15" fill="rgb(213,25,53)" fg:x="301931934" fg:w="9200189"/><text x="97.2930%" y="367.50">uni..</text></g><g><title>unicode_normalization::perfect_hash::mph_lookup (9,200,189 samples, 2.96%)</title><rect x="97.0430%" y="341" width="2.9570%" height="15" fill="rgb(252,105,26)" fg:x="301931934" fg:w="9200189"/><text x="97.2930%" y="351.50">uni..</text></g></svg></svg>